### YamlMime:ManagedReference
items:
- uid: DotNetHelper_IO.Enum.FolderOption
  commentId: T:DotNetHelper_IO.Enum.FolderOption
  id: FolderOption
  parent: DotNetHelper_IO.Enum
  children:
  - DotNetHelper_IO.Enum.FolderOption.DeleteThenWrite
  - DotNetHelper_IO.Enum.FolderOption.DoNothingIfExist
  - DotNetHelper_IO.Enum.FolderOption.DoNothingIfFileExist
  - DotNetHelper_IO.Enum.FolderOption.OverwriteFilesIfExist
  langs:
  - csharp
  - vb
  name: FolderOption
  nameWithType: FolderOption
  fullName: DotNetHelper_IO.Enum.FolderOption
  type: Enum
  source:
    remote:
      path: src/DotNetHelper-IO/Enum/FileOption.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-IO.git
    id: FolderOption
    path: ../src/DotNetHelper-IO/Enum/FileOption.cs
    startLine: 13
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO.Enum
  summary: "\nEnum FileOption\n"
  example: []
  syntax:
    content: public enum FolderOption
    content.vb: Public Enum FolderOption
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: DotNetHelper_IO.Enum.FolderOption.OverwriteFilesIfExist
  commentId: F:DotNetHelper_IO.Enum.FolderOption.OverwriteFilesIfExist
  id: OverwriteFilesIfExist
  parent: DotNetHelper_IO.Enum.FolderOption
  langs:
  - csharp
  - vb
  name: OverwriteFilesIfExist
  nameWithType: FolderOption.OverwriteFilesIfExist
  fullName: DotNetHelper_IO.Enum.FolderOption.OverwriteFilesIfExist
  type: Field
  source:
    remote:
      path: src/DotNetHelper-IO/Enum/FileOption.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-IO.git
    id: OverwriteFilesIfExist
    path: ../src/DotNetHelper-IO/Enum/FileOption.cs
    startLine: 19
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO.Enum
  summary: "\nWill not delete any files or subfolders but when copying or moving if a file already exist with the same name it will get overwritten\n"
  example: []
  syntax:
    content: OverwriteFilesIfExist = 2
    return:
      type: DotNetHelper_IO.Enum.FolderOption
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DotNetHelper_IO.Enum.FolderOption.DoNothingIfExist
  commentId: F:DotNetHelper_IO.Enum.FolderOption.DoNothingIfExist
  id: DoNothingIfExist
  parent: DotNetHelper_IO.Enum.FolderOption
  langs:
  - csharp
  - vb
  name: DoNothingIfExist
  nameWithType: FolderOption.DoNothingIfExist
  fullName: DotNetHelper_IO.Enum.FolderOption.DoNothingIfExist
  type: Field
  source:
    remote:
      path: src/DotNetHelper-IO/Enum/FileOption.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-IO.git
    id: DoNothingIfExist
    path: ../src/DotNetHelper-IO/Enum/FileOption.cs
    startLine: 23
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO.Enum
  summary: "\nDo absolutely nothing if the specified folder already exist. Nothing will get copy or moved even if subdirectories doesn&apos;t exist \n"
  example: []
  syntax:
    content: DoNothingIfExist = 3
    return:
      type: DotNetHelper_IO.Enum.FolderOption
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DotNetHelper_IO.Enum.FolderOption.DoNothingIfFileExist
  commentId: F:DotNetHelper_IO.Enum.FolderOption.DoNothingIfFileExist
  id: DoNothingIfFileExist
  parent: DotNetHelper_IO.Enum.FolderOption
  langs:
  - csharp
  - vb
  name: DoNothingIfFileExist
  nameWithType: FolderOption.DoNothingIfFileExist
  fullName: DotNetHelper_IO.Enum.FolderOption.DoNothingIfFileExist
  type: Field
  source:
    remote:
      path: src/DotNetHelper-IO/Enum/FileOption.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-IO.git
    id: DoNothingIfFileExist
    path: ../src/DotNetHelper-IO/Enum/FileOption.cs
    startLine: 27
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO.Enum
  summary: "\nDo absolutely nothing if the folder already exist\n"
  example: []
  syntax:
    content: DoNothingIfFileExist = 4
    return:
      type: DotNetHelper_IO.Enum.FolderOption
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DotNetHelper_IO.Enum.FolderOption.DeleteThenWrite
  commentId: F:DotNetHelper_IO.Enum.FolderOption.DeleteThenWrite
  id: DeleteThenWrite
  parent: DotNetHelper_IO.Enum.FolderOption
  langs:
  - csharp
  - vb
  name: DeleteThenWrite
  nameWithType: FolderOption.DeleteThenWrite
  fullName: DotNetHelper_IO.Enum.FolderOption.DeleteThenWrite
  type: Field
  source:
    remote:
      path: src/DotNetHelper-IO/Enum/FileOption.cs
      branch: master
      repo: git@github.com:TheMofaDe/DotNetHelper-IO.git
    id: DeleteThenWrite
    path: ../src/DotNetHelper-IO/Enum/FileOption.cs
    startLine: 31
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO.Enum
  summary: "\nDelete the specified path recursively and then perform the copy or move operation\n"
  example: []
  syntax:
    content: DeleteThenWrite = 5
    return:
      type: DotNetHelper_IO.Enum.FolderOption
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: DotNetHelper_IO.Enum
  commentId: N:DotNetHelper_IO.Enum
  name: DotNetHelper_IO.Enum
  nameWithType: DotNetHelper_IO.Enum
  fullName: DotNetHelper_IO.Enum
- uid: DotNetHelper_IO.Enum.FolderOption
  commentId: T:DotNetHelper_IO.Enum.FolderOption
  parent: DotNetHelper_IO.Enum
  name: FolderOption
  nameWithType: FolderOption
  fullName: DotNetHelper_IO.Enum.FolderOption
