### YamlMime:ManagedReference
items:
- uid: DotNetHelper_IO.FileObject
  commentId: T:DotNetHelper_IO.FileObject
  id: FileObject
  parent: DotNetHelper_IO
  children:
  - DotNetHelper_IO.FileObject.#ctor(System.IO.FileInfo,System.Text.Encoding)
  - DotNetHelper_IO.FileObject.#ctor(System.String,System.Text.Encoding)
  - DotNetHelper_IO.FileObject.ChangeExtension(System.String,DotNetHelper_IO.Enum.FileOption,System.IProgress{System.Double})
  - DotNetHelper_IO.FileObject.ChangeExtensionAsync(System.String,DotNetHelper_IO.Enum.FileOption,System.Threading.CancellationToken,System.Int32)
  - DotNetHelper_IO.FileObject.CopyTo(System.String,DotNetHelper_IO.Enum.FileOption)
  - DotNetHelper_IO.FileObject.CopyToAsync(System.String,DotNetHelper_IO.Enum.FileOption,System.Threading.CancellationToken,System.Int32)
  - DotNetHelper_IO.FileObject.CopyToAsync(System.String,DotNetHelper_IO.Enum.FileOption,System.Threading.CancellationToken,System.IProgress{System.Int64},System.Int32)
  - DotNetHelper_IO.FileObject.CreateOrTruncate(System.Boolean)
  - DotNetHelper_IO.FileObject.DefaultEncoding
  - DotNetHelper_IO.FileObject.DeleteFile(System.Boolean)
  - DotNetHelper_IO.FileObject.Dispose
  - DotNetHelper_IO.FileObject.Exist
  - DotNetHelper_IO.FileObject.Extension
  - DotNetHelper_IO.FileObject.FileInfo
  - DotNetHelper_IO.FileObject.FileNameOnly
  - DotNetHelper_IO.FileObject.FileNameOnlyNoExtension
  - DotNetHelper_IO.FileObject.FilePathOnly
  - DotNetHelper_IO.FileObject.FileSize
  - DotNetHelper_IO.FileObject.FolderNameOnly
  - DotNetHelper_IO.FileObject.FullFilePath
  - DotNetHelper_IO.FileObject.GetFileEncoding
  - DotNetHelper_IO.FileObject.GetFileSize(DotNetHelper_IO.Enum.SizeUnits,System.Boolean)
  - DotNetHelper_IO.FileObject.GetFileSize(System.Boolean)
  - DotNetHelper_IO.FileObject.GetFileStream(DotNetHelper_IO.Enum.FileOption,System.Int32,System.Boolean)
  - DotNetHelper_IO.FileObject.GetIncrementExtension(System.String)
  - DotNetHelper_IO.FileObject.GetIncrementFileName(System.String)
  - DotNetHelper_IO.FileObject.Init(System.Boolean)
  - DotNetHelper_IO.FileObject.MoveTo(System.String,DotNetHelper_IO.Enum.FileOption)
  - DotNetHelper_IO.FileObject.MoveToAsync(System.String,DotNetHelper_IO.Enum.FileOption,System.Threading.CancellationToken,System.Int32)
  - DotNetHelper_IO.FileObject.NotifyFilters
  - DotNetHelper_IO.FileObject.ReadAllLines
  - DotNetHelper_IO.FileObject.ReadToString(System.Boolean)
  - DotNetHelper_IO.FileObject.RefreshObject
  - DotNetHelper_IO.FileObject.SetFileAttribute(DotNetHelper_IO.Enum.AddOrRemoveEnum,System.Collections.Generic.List{System.IO.FileAttributes})
  - DotNetHelper_IO.FileObject.StartWatching(System.IO.WatcherChangeTypes,System.Boolean,System.Nullable{System.IO.NotifyFilters})
  - DotNetHelper_IO.FileObject.StopWatching
  - DotNetHelper_IO.FileObject.Watcher
  - DotNetHelper_IO.FileObject.WatchTimeout
  - DotNetHelper_IO.FileObject.Write(System.Byte[],DotNetHelper_IO.Enum.FileOption,System.Int32,System.Nullable{System.Int32})
  - DotNetHelper_IO.FileObject.Write(System.IO.Stream,DotNetHelper_IO.Enum.FileOption,System.Int32)
  - DotNetHelper_IO.FileObject.Write(System.IO.Stream,System.IProgress{System.Int64},DotNetHelper_IO.Enum.FileOption,System.Int32)
  - DotNetHelper_IO.FileObject.Write(System.String,DotNetHelper_IO.Enum.FileOption,System.Text.Encoding,System.Int32)
  - DotNetHelper_IO.FileObject.WriteAsync(System.Byte[],DotNetHelper_IO.Enum.FileOption,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)
  - DotNetHelper_IO.FileObject.WriteAsync(System.IO.Stream,DotNetHelper_IO.Enum.FileOption,System.Int32,System.Threading.CancellationToken)
  - DotNetHelper_IO.FileObject.WriteAsync(System.IO.Stream,System.IProgress{System.Int64},DotNetHelper_IO.Enum.FileOption,System.Int32,System.Threading.CancellationToken)
  - DotNetHelper_IO.FileObject.WriteAsync(System.String,DotNetHelper_IO.Enum.FileOption,System.Text.Encoding,System.Int32)
  langs:
  - csharp
  - vb
  name: FileObject
  nameWithType: FileObject
  fullName: DotNetHelper_IO.FileObject
  type: Class
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: FileObject
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 22
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nClass FileObject.\n"
  example: []
  syntax:
    content: 'public class FileObject : IDisposable'
    content.vb: >-
      Public Class FileObject
          Implements IDisposable
  seealso:
  - linkId: System.IDisposable
    commentId: T:System.IDisposable
  inheritance:
  - System.Object
  derivedClasses:
  - DotNetHelper_IO.ZipFileObject
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DotNetHelper_IO.FileObject.DefaultEncoding
  commentId: P:DotNetHelper_IO.FileObject.DefaultEncoding
  id: DefaultEncoding
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: DefaultEncoding
  nameWithType: FileObject.DefaultEncoding
  fullName: DotNetHelper_IO.FileObject.DefaultEncoding
  type: Property
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: DefaultEncoding
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 25
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  syntax:
    content: public Encoding DefaultEncoding { get; }
    parameters: []
    return:
      type: System.Text.Encoding
    content.vb: Public ReadOnly Property DefaultEncoding As Encoding
  overload: DotNetHelper_IO.FileObject.DefaultEncoding*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotNetHelper_IO.FileObject.FileInfo
  commentId: P:DotNetHelper_IO.FileObject.FileInfo
  id: FileInfo
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: FileInfo
  nameWithType: FileObject.FileInfo
  fullName: DotNetHelper_IO.FileObject.FileInfo
  type: Property
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: FileInfo
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 26
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  syntax:
    content: public FileInfo FileInfo { get; }
    parameters: []
    return:
      type: System.IO.FileInfo
    content.vb: Public ReadOnly Property FileInfo As FileInfo
  overload: DotNetHelper_IO.FileObject.FileInfo*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotNetHelper_IO.FileObject.FileNameOnly
  commentId: P:DotNetHelper_IO.FileObject.FileNameOnly
  id: FileNameOnly
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: FileNameOnly
  nameWithType: FileObject.FileNameOnly
  fullName: DotNetHelper_IO.FileObject.FileNameOnly
  type: Property
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: FileNameOnly
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 32
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nGets the file name only.\n"
  example: []
  syntax:
    content: public string FileNameOnly { get; }
    parameters: []
    return:
      type: System.String
      description: The file name only.
    content.vb: Public ReadOnly Property FileNameOnly As String
  overload: DotNetHelper_IO.FileObject.FileNameOnly*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotNetHelper_IO.FileObject.FileNameOnlyNoExtension
  commentId: P:DotNetHelper_IO.FileObject.FileNameOnlyNoExtension
  id: FileNameOnlyNoExtension
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: FileNameOnlyNoExtension
  nameWithType: FileObject.FileNameOnlyNoExtension
  fullName: DotNetHelper_IO.FileObject.FileNameOnlyNoExtension
  type: Property
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: FileNameOnlyNoExtension
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 37
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nGets the file name only no extension.\n"
  example: []
  syntax:
    content: public string FileNameOnlyNoExtension { get; }
    parameters: []
    return:
      type: System.String
      description: The file name only no extension.
    content.vb: Public ReadOnly Property FileNameOnlyNoExtension As String
  overload: DotNetHelper_IO.FileObject.FileNameOnlyNoExtension*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotNetHelper_IO.FileObject.FilePathOnly
  commentId: P:DotNetHelper_IO.FileObject.FilePathOnly
  id: FilePathOnly
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: FilePathOnly
  nameWithType: FileObject.FilePathOnly
  fullName: DotNetHelper_IO.FileObject.FilePathOnly
  type: Property
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: FilePathOnly
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 43
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nGets the file path only.\n"
  example: []
  syntax:
    content: public string FilePathOnly { get; }
    parameters: []
    return:
      type: System.String
      description: The file path only.
    content.vb: Public ReadOnly Property FilePathOnly As String
  overload: DotNetHelper_IO.FileObject.FilePathOnly*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotNetHelper_IO.FileObject.FullFilePath
  commentId: P:DotNetHelper_IO.FileObject.FullFilePath
  id: FullFilePath
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: FullFilePath
  nameWithType: FileObject.FullFilePath
  fullName: DotNetHelper_IO.FileObject.FullFilePath
  type: Property
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: FullFilePath
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 48
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nGets the full file path.\n"
  example: []
  syntax:
    content: public string FullFilePath { get; }
    parameters: []
    return:
      type: System.String
      description: The full file path.
    content.vb: Public ReadOnly Property FullFilePath As String
  overload: DotNetHelper_IO.FileObject.FullFilePath*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotNetHelper_IO.FileObject.Extension
  commentId: P:DotNetHelper_IO.FileObject.Extension
  id: Extension
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: Extension
  nameWithType: FileObject.Extension
  fullName: DotNetHelper_IO.FileObject.Extension
  type: Property
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: Extension
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 51
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  syntax:
    content: public string Extension { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Extension As String
  overload: DotNetHelper_IO.FileObject.Extension*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotNetHelper_IO.FileObject.FolderNameOnly
  commentId: P:DotNetHelper_IO.FileObject.FolderNameOnly
  id: FolderNameOnly
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: FolderNameOnly
  nameWithType: FileObject.FolderNameOnly
  fullName: DotNetHelper_IO.FileObject.FolderNameOnly
  type: Property
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: FolderNameOnly
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 56
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nGets the folder name only.\n"
  example: []
  syntax:
    content: public string FolderNameOnly { get; }
    parameters: []
    return:
      type: System.String
      description: The folder name only.
    content.vb: Public ReadOnly Property FolderNameOnly As String
  overload: DotNetHelper_IO.FileObject.FolderNameOnly*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotNetHelper_IO.FileObject.FileSize
  commentId: P:DotNetHelper_IO.FileObject.FileSize
  id: FileSize
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: FileSize
  nameWithType: FileObject.FileSize
  fullName: DotNetHelper_IO.FileObject.FileSize
  type: Property
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: FileSize
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 62
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nSize is in bytes\n"
  example: []
  syntax:
    content: public long? FileSize { get; }
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: The size of the file.
    content.vb: Public ReadOnly Property FileSize As Long?
  overload: DotNetHelper_IO.FileObject.FileSize*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotNetHelper_IO.FileObject.Exist
  commentId: P:DotNetHelper_IO.FileObject.Exist
  id: Exist
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: Exist
  nameWithType: FileObject.Exist
  fullName: DotNetHelper_IO.FileObject.Exist
  type: Property
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: Exist
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 67
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nGets a value indicating whether this <xref href=\"DotNetHelper_IO.FileObject\" data-throw-if-not-resolved=\"false\"></xref> is exist.\n"
  example: []
  syntax:
    content: public bool Exist { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Exist As Boolean
  overload: DotNetHelper_IO.FileObject.Exist*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotNetHelper_IO.FileObject.WatchTimeout
  commentId: P:DotNetHelper_IO.FileObject.WatchTimeout
  id: WatchTimeout
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: WatchTimeout
  nameWithType: FileObject.WatchTimeout
  fullName: DotNetHelper_IO.FileObject.WatchTimeout
  type: Property
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: WatchTimeout
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 81
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nGets or sets the watch timeout.\n"
  example: []
  syntax:
    content: public int WatchTimeout { get; set; }
    parameters: []
    return:
      type: System.Int32
      description: The watch timeout.
    content.vb: Public Property WatchTimeout As Integer
  overload: DotNetHelper_IO.FileObject.WatchTimeout*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.Watcher
  commentId: P:DotNetHelper_IO.FileObject.Watcher
  id: Watcher
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: Watcher
  nameWithType: FileObject.Watcher
  fullName: DotNetHelper_IO.FileObject.Watcher
  type: Property
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: Watcher
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 86
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nGets the watcher.\n"
  example: []
  syntax:
    content: public FileSystemWatcher Watcher { get; }
    parameters: []
    return:
      type: System.IO.FileSystemWatcher
      description: The watcher.
    content.vb: Public ReadOnly Property Watcher As FileSystemWatcher
  overload: DotNetHelper_IO.FileObject.Watcher*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DotNetHelper_IO.FileObject.NotifyFilters
  commentId: P:DotNetHelper_IO.FileObject.NotifyFilters
  id: NotifyFilters
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: NotifyFilters
  nameWithType: FileObject.NotifyFilters
  fullName: DotNetHelper_IO.FileObject.NotifyFilters
  type: Property
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: NotifyFilters
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 92
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nGets or sets the notify filters.\n"
  example: []
  syntax:
    content: public NotifyFilters NotifyFilters { get; set; }
    parameters: []
    return:
      type: System.IO.NotifyFilters
      description: The notify filters.
    content.vb: Public Property NotifyFilters As NotifyFilters
  overload: DotNetHelper_IO.FileObject.NotifyFilters*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.#ctor(System.String,System.Text.Encoding)
  commentId: M:DotNetHelper_IO.FileObject.#ctor(System.String,System.Text.Encoding)
  id: '#ctor(System.String,System.Text.Encoding)'
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: FileObject(String, Encoding)
  nameWithType: FileObject.FileObject(String, Encoding)
  fullName: DotNetHelper_IO.FileObject.FileObject(System.String, System.Text.Encoding)
  type: Constructor
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: .ctor
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 99
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nInitializes a new instance of the <xref href=\"DotNetHelper_IO.FileObject\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public FileObject(string file, Encoding defaultEncoding = null)
    parameters:
    - id: file
      type: System.String
      description: The file.
    - id: defaultEncoding
      type: System.Text.Encoding
      description: ''
    content.vb: Public Sub New(file As String, defaultEncoding As Encoding = Nothing)
  overload: DotNetHelper_IO.FileObject.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.#ctor(System.IO.FileInfo,System.Text.Encoding)
  commentId: M:DotNetHelper_IO.FileObject.#ctor(System.IO.FileInfo,System.Text.Encoding)
  id: '#ctor(System.IO.FileInfo,System.Text.Encoding)'
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: FileObject(FileInfo, Encoding)
  nameWithType: FileObject.FileObject(FileInfo, Encoding)
  fullName: DotNetHelper_IO.FileObject.FileObject(System.IO.FileInfo, System.Text.Encoding)
  type: Constructor
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: .ctor
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 112
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nInitializes a new instance of the <xref href=\"DotNetHelper_IO.FileObject\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public FileObject(FileInfo fileInfo, Encoding defaultEncoding = null)
    parameters:
    - id: fileInfo
      type: System.IO.FileInfo
      description: ''
    - id: defaultEncoding
      type: System.Text.Encoding
      description: ''
    content.vb: Public Sub New(fileInfo As FileInfo, defaultEncoding As Encoding = Nothing)
  overload: DotNetHelper_IO.FileObject.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.Init(System.Boolean)
  commentId: M:DotNetHelper_IO.FileObject.Init(System.Boolean)
  id: Init(System.Boolean)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: Init(Boolean)
  nameWithType: FileObject.Init(Boolean)
  fullName: DotNetHelper_IO.FileObject.Init(System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: Init
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 122
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  syntax:
    content: public void Init(bool throwOnBadFileName)
    parameters:
    - id: throwOnBadFileName
      type: System.Boolean
    content.vb: Public Sub Init(throwOnBadFileName As Boolean)
  overload: DotNetHelper_IO.FileObject.Init*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.RefreshObject
  commentId: M:DotNetHelper_IO.FileObject.RefreshObject
  id: RefreshObject
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: RefreshObject()
  nameWithType: FileObject.RefreshObject()
  fullName: DotNetHelper_IO.FileObject.RefreshObject()
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: RefreshObject
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 138
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nRefreshes the object.\n"
  example: []
  syntax:
    content: public void RefreshObject()
    content.vb: Public Sub RefreshObject
  overload: DotNetHelper_IO.FileObject.RefreshObject*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.CopyTo(System.String,DotNetHelper_IO.Enum.FileOption)
  commentId: M:DotNetHelper_IO.FileObject.CopyTo(System.String,DotNetHelper_IO.Enum.FileOption)
  id: CopyTo(System.String,DotNetHelper_IO.Enum.FileOption)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: CopyTo(String, FileOption)
  nameWithType: FileObject.CopyTo(String, FileOption)
  fullName: DotNetHelper_IO.FileObject.CopyTo(System.String, DotNetHelper_IO.Enum.FileOption)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: CopyTo
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 186
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nreturn the fullfilepath of where the file was copied to.\n"
  example: []
  syntax:
    content: public string CopyTo(string copyToFullFilePath, FileOption option)
    parameters:
    - id: copyToFullFilePath
      type: System.String
      description: The file path to copy to .
    - id: option
      type: DotNetHelper_IO.Enum.FileOption
      description: ''
    return:
      type: System.String
    content.vb: Public Function CopyTo(copyToFullFilePath As String, option As FileOption) As String
  overload: DotNetHelper_IO.FileObject.CopyTo*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: 'throws if the application doesn&apos;t have the required permission '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.CopyToAsync(System.String,DotNetHelper_IO.Enum.FileOption,System.Threading.CancellationToken,System.Int32)
  commentId: M:DotNetHelper_IO.FileObject.CopyToAsync(System.String,DotNetHelper_IO.Enum.FileOption,System.Threading.CancellationToken,System.Int32)
  id: CopyToAsync(System.String,DotNetHelper_IO.Enum.FileOption,System.Threading.CancellationToken,System.Int32)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: CopyToAsync(String, FileOption, CancellationToken, Int32)
  nameWithType: FileObject.CopyToAsync(String, FileOption, CancellationToken, Int32)
  fullName: DotNetHelper_IO.FileObject.CopyToAsync(System.String, DotNetHelper_IO.Enum.FileOption, System.Threading.CancellationToken, System.Int32)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: CopyToAsync
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 234
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nCopy the current file to the destination. Returns the destination file name\n"
  example: []
  syntax:
    content: public Task<string> CopyToAsync(string copyToFullFilePath, FileOption option, CancellationToken cancellationToken, int bufferSize = 4096)
    parameters:
    - id: copyToFullFilePath
      type: System.String
      description: ''
    - id: option
      type: DotNetHelper_IO.Enum.FileOption
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    - id: bufferSize
      type: System.Int32
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The copy to file
    content.vb: Public Function CopyToAsync(copyToFullFilePath As String, option As FileOption, cancellationToken As CancellationToken, bufferSize As Integer = 4096) As Task(Of String)
  overload: DotNetHelper_IO.FileObject.CopyToAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.CopyToAsync(System.String,DotNetHelper_IO.Enum.FileOption,System.Threading.CancellationToken,System.IProgress{System.Int64},System.Int32)
  commentId: M:DotNetHelper_IO.FileObject.CopyToAsync(System.String,DotNetHelper_IO.Enum.FileOption,System.Threading.CancellationToken,System.IProgress{System.Int64},System.Int32)
  id: CopyToAsync(System.String,DotNetHelper_IO.Enum.FileOption,System.Threading.CancellationToken,System.IProgress{System.Int64},System.Int32)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: CopyToAsync(String, FileOption, CancellationToken, IProgress<Int64>, Int32)
  nameWithType: FileObject.CopyToAsync(String, FileOption, CancellationToken, IProgress<Int64>, Int32)
  fullName: DotNetHelper_IO.FileObject.CopyToAsync(System.String, DotNetHelper_IO.Enum.FileOption, System.Threading.CancellationToken, System.IProgress<System.Int64>, System.Int32)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: CopyToAsync
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 257
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nCopy the current file to the destination with progress\n"
  example: []
  syntax:
    content: public Task<string> CopyToAsync(string copyToFullFilePath, FileOption option, CancellationToken cancellationToken, IProgress<long> progress, int bufferSize = 4096)
    parameters:
    - id: copyToFullFilePath
      type: System.String
      description: ''
    - id: option
      type: DotNetHelper_IO.Enum.FileOption
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    - id: progress
      type: System.IProgress{System.Int64}
      description: ''
    - id: bufferSize
      type: System.Int32
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
    content.vb: Public Function CopyToAsync(copyToFullFilePath As String, option As FileOption, cancellationToken As CancellationToken, progress As IProgress(Of Long), bufferSize As Integer = 4096) As Task(Of String)
  overload: DotNetHelper_IO.FileObject.CopyToAsync*
  nameWithType.vb: FileObject.CopyToAsync(String, FileOption, CancellationToken, IProgress(Of Int64), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper_IO.FileObject.CopyToAsync(System.String, DotNetHelper_IO.Enum.FileOption, System.Threading.CancellationToken, System.IProgress(Of System.Int64), System.Int32)
  name.vb: CopyToAsync(String, FileOption, CancellationToken, IProgress(Of Int64), Int32)
- uid: DotNetHelper_IO.FileObject.MoveTo(System.String,DotNetHelper_IO.Enum.FileOption)
  commentId: M:DotNetHelper_IO.FileObject.MoveTo(System.String,DotNetHelper_IO.Enum.FileOption)
  id: MoveTo(System.String,DotNetHelper_IO.Enum.FileOption)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: MoveTo(String, FileOption)
  nameWithType: FileObject.MoveTo(String, FileOption)
  fullName: DotNetHelper_IO.FileObject.MoveTo(System.String, DotNetHelper_IO.Enum.FileOption)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: MoveTo
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 279
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nCopies the file and deletes the original \n"
  example: []
  syntax:
    content: public bool MoveTo(string moveToFullFilePath, FileOption option)
    parameters:
    - id: moveToFullFilePath
      type: System.String
      description: ''
    - id: option
      type: DotNetHelper_IO.Enum.FileOption
      description: ''
    return:
      type: System.Boolean
    content.vb: Public Function MoveTo(moveToFullFilePath As String, option As FileOption) As Boolean
  overload: DotNetHelper_IO.FileObject.MoveTo*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: 'throws if the application doesn&apos;t have the required permission '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.MoveToAsync(System.String,DotNetHelper_IO.Enum.FileOption,System.Threading.CancellationToken,System.Int32)
  commentId: M:DotNetHelper_IO.FileObject.MoveToAsync(System.String,DotNetHelper_IO.Enum.FileOption,System.Threading.CancellationToken,System.Int32)
  id: MoveToAsync(System.String,DotNetHelper_IO.Enum.FileOption,System.Threading.CancellationToken,System.Int32)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: MoveToAsync(String, FileOption, CancellationToken, Int32)
  nameWithType: FileObject.MoveToAsync(String, FileOption, CancellationToken, Int32)
  fullName: DotNetHelper_IO.FileObject.MoveToAsync(System.String, DotNetHelper_IO.Enum.FileOption, System.Threading.CancellationToken, System.Int32)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: MoveToAsync
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 318
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nCopies the file and deletes the original \n"
  example: []
  syntax:
    content: public Task<bool> MoveToAsync(string moveToFullFilePath, FileOption option, CancellationToken cancellationToken, int bufferSize = 4096)
    parameters:
    - id: moveToFullFilePath
      type: System.String
      description: ''
    - id: option
      type: DotNetHelper_IO.Enum.FileOption
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    - id: bufferSize
      type: System.Int32
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function MoveToAsync(moveToFullFilePath As String, option As FileOption, cancellationToken As CancellationToken, bufferSize As Integer = 4096) As Task(Of Boolean)
  overload: DotNetHelper_IO.FileObject.MoveToAsync*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: 'throws if the application doesn&apos;t have the required permission '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.ChangeExtension(System.String,DotNetHelper_IO.Enum.FileOption,System.IProgress{System.Double})
  commentId: M:DotNetHelper_IO.FileObject.ChangeExtension(System.String,DotNetHelper_IO.Enum.FileOption,System.IProgress{System.Double})
  id: ChangeExtension(System.String,DotNetHelper_IO.Enum.FileOption,System.IProgress{System.Double})
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: ChangeExtension(String, FileOption, IProgress<Double>)
  nameWithType: FileObject.ChangeExtension(String, FileOption, IProgress<Double>)
  fullName: DotNetHelper_IO.FileObject.ChangeExtension(System.String, DotNetHelper_IO.Enum.FileOption, System.IProgress<System.Double>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: ChangeExtension
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 364
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nChanges the extension of the current file. Does nothing if file doesn&apos;t exist return boolean on whether or not the file extension actually got change\n\n"
  example: []
  syntax:
    content: public bool ChangeExtension(string newExtension, FileOption option, IProgress<double> progress = null)
    parameters:
    - id: newExtension
      type: System.String
      description: ''
    - id: option
      type: DotNetHelper_IO.Enum.FileOption
      description: ''
    - id: progress
      type: System.IProgress{System.Double}
      description: ''
    return:
      type: System.Boolean
    content.vb: Public Function ChangeExtension(newExtension As String, option As FileOption, progress As IProgress(Of Double) = Nothing) As Boolean
  overload: DotNetHelper_IO.FileObject.ChangeExtension*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: 'throws if the application doesn&apos;t have the required permission '
  nameWithType.vb: FileObject.ChangeExtension(String, FileOption, IProgress(Of Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper_IO.FileObject.ChangeExtension(System.String, DotNetHelper_IO.Enum.FileOption, System.IProgress(Of System.Double))
  name.vb: ChangeExtension(String, FileOption, IProgress(Of Double))
- uid: DotNetHelper_IO.FileObject.ChangeExtensionAsync(System.String,DotNetHelper_IO.Enum.FileOption,System.Threading.CancellationToken,System.Int32)
  commentId: M:DotNetHelper_IO.FileObject.ChangeExtensionAsync(System.String,DotNetHelper_IO.Enum.FileOption,System.Threading.CancellationToken,System.Int32)
  id: ChangeExtensionAsync(System.String,DotNetHelper_IO.Enum.FileOption,System.Threading.CancellationToken,System.Int32)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: ChangeExtensionAsync(String, FileOption, CancellationToken, Int32)
  nameWithType: FileObject.ChangeExtensionAsync(String, FileOption, CancellationToken, Int32)
  fullName: DotNetHelper_IO.FileObject.ChangeExtensionAsync(System.String, DotNetHelper_IO.Enum.FileOption, System.Threading.CancellationToken, System.Int32)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: ChangeExtensionAsync
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 381
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nChanges the extension of the current file. Does nothing if file doesn&apos;t exist return boolean on whether or not the file extension actually got change\n\n"
  example: []
  syntax:
    content: public Task<bool> ChangeExtensionAsync(string newExtension, FileOption option, CancellationToken cancellationToken, int bufferSize = 4096)
    parameters:
    - id: newExtension
      type: System.String
      description: ''
    - id: option
      type: DotNetHelper_IO.Enum.FileOption
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    - id: bufferSize
      type: System.Int32
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function ChangeExtensionAsync(newExtension As String, option As FileOption, cancellationToken As CancellationToken, bufferSize As Integer = 4096) As Task(Of Boolean)
  overload: DotNetHelper_IO.FileObject.ChangeExtensionAsync*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: 'throws if the application doesn&apos;t have the required permission '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.DeleteFile(System.Boolean)
  commentId: M:DotNetHelper_IO.FileObject.DeleteFile(System.Boolean)
  id: DeleteFile(System.Boolean)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: DeleteFile(Boolean)
  nameWithType: FileObject.DeleteFile(Boolean)
  fullName: DotNetHelper_IO.FileObject.DeleteFile(System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: DeleteFile
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 393
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nDeletes the file.\n"
  example: []
  syntax:
    content: public void DeleteFile(bool disposeObject)
    parameters:
    - id: disposeObject
      type: System.Boolean
    content.vb: Public Sub DeleteFile(disposeObject As Boolean)
  overload: DotNetHelper_IO.FileObject.DeleteFile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.CreateOrTruncate(System.Boolean)
  commentId: M:DotNetHelper_IO.FileObject.CreateOrTruncate(System.Boolean)
  id: CreateOrTruncate(System.Boolean)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: CreateOrTruncate(Boolean)
  nameWithType: FileObject.CreateOrTruncate(Boolean)
  fullName: DotNetHelper_IO.FileObject.CreateOrTruncate(System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: CreateOrTruncate
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 414
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nCreates a empty file if it doesn&apos;t exist otherwise truncates it if set to <code>true</code> [overwrite existing files].\n"
  example: []
  syntax:
    content: public bool CreateOrTruncate(bool truncate = true)
    parameters:
    - id: truncate
      type: System.Boolean
      description: if set to <code>true</code> [truncate].
    return:
      type: System.Boolean
      description: <code>true</code> if XXXX, <code>false</code> otherwise.
    content.vb: Public Function CreateOrTruncate(truncate As Boolean = True) As Boolean
  overload: DotNetHelper_IO.FileObject.CreateOrTruncate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.GetIncrementFileName(System.String)
  commentId: M:DotNetHelper_IO.FileObject.GetIncrementFileName(System.String)
  id: GetIncrementFileName(System.String)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: GetIncrementFileName(String)
  nameWithType: FileObject.GetIncrementFileName(String)
  fullName: DotNetHelper_IO.FileObject.GetIncrementFileName(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: GetIncrementFileName
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 432
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  syntax:
    content: public string GetIncrementFileName(string seperator = "")
    parameters:
    - id: seperator
      type: System.String
    return:
      type: System.String
    content.vb: Public Function GetIncrementFileName(seperator As String = "") As String
  overload: DotNetHelper_IO.FileObject.GetIncrementFileName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.GetIncrementExtension(System.String)
  commentId: M:DotNetHelper_IO.FileObject.GetIncrementExtension(System.String)
  id: GetIncrementExtension(System.String)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: GetIncrementExtension(String)
  nameWithType: FileObject.GetIncrementExtension(String)
  fullName: DotNetHelper_IO.FileObject.GetIncrementExtension(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: GetIncrementExtension
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 475
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  syntax:
    content: public string GetIncrementExtension(string seperator = "")
    parameters:
    - id: seperator
      type: System.String
    return:
      type: System.String
    content.vb: Public Function GetIncrementExtension(seperator As String = "") As String
  overload: DotNetHelper_IO.FileObject.GetIncrementExtension*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.ReadAllLines
  commentId: M:DotNetHelper_IO.FileObject.ReadAllLines
  id: ReadAllLines
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: ReadAllLines()
  nameWithType: FileObject.ReadAllLines()
  fullName: DotNetHelper_IO.FileObject.ReadAllLines()
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: ReadAllLines
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 526
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nReads the file to list.\n"
  example: []
  syntax:
    content: public string[] ReadAllLines()
    return:
      type: System.String[]
      description: List&lt;System.String>.
    content.vb: Public Function ReadAllLines As String()
  overload: DotNetHelper_IO.FileObject.ReadAllLines*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.ReadToString(System.Boolean)
  commentId: M:DotNetHelper_IO.FileObject.ReadToString(System.Boolean)
  id: ReadToString(System.Boolean)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: ReadToString(Boolean)
  nameWithType: FileObject.ReadToString(Boolean)
  fullName: DotNetHelper_IO.FileObject.ReadToString(System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: ReadToString
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 535
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nReads the file.\n"
  example: []
  syntax:
    content: public string ReadToString(bool throwOnFileNotFound = true)
    parameters:
    - id: throwOnFileNotFound
      type: System.Boolean
    return:
      type: System.String
      description: System.String.
    content.vb: Public Function ReadToString(throwOnFileNotFound As Boolean = True) As String
  overload: DotNetHelper_IO.FileObject.ReadToString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.GetFileStream(DotNetHelper_IO.Enum.FileOption,System.Int32,System.Boolean)
  commentId: M:DotNetHelper_IO.FileObject.GetFileStream(DotNetHelper_IO.Enum.FileOption,System.Int32,System.Boolean)
  id: GetFileStream(DotNetHelper_IO.Enum.FileOption,System.Int32,System.Boolean)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: GetFileStream(FileOption, Int32, Boolean)
  nameWithType: FileObject.GetFileStream(FileOption, Int32, Boolean)
  fullName: DotNetHelper_IO.FileObject.GetFileStream(DotNetHelper_IO.Enum.FileOption, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: GetFileStream
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 637
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nGets the file stream.\n"
  example: []
  syntax:
    content: public (FileStream fileStream, string fullFilePath) GetFileStream(FileOption option, int bufferSize = 4096, bool useAsync = false)
    parameters:
    - id: option
      type: DotNetHelper_IO.Enum.FileOption
      description: The option.
    - id: bufferSize
      type: System.Int32
      description: ''
    - id: useAsync
      type: System.Boolean
      description: ''
    return:
      type: System.ValueTuple{System.IO.FileStream,System.String}
      description: FileStream.
    content.vb: Public Function GetFileStream(option As FileOption, bufferSize As Integer = 4096, useAsync As Boolean = False) As(fileStream As FileStream, fullFilePath As String)
  overload: DotNetHelper_IO.FileObject.GetFileStream*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: option - null
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.Write(System.String,DotNetHelper_IO.Enum.FileOption,System.Text.Encoding,System.Int32)
  commentId: M:DotNetHelper_IO.FileObject.Write(System.String,DotNetHelper_IO.Enum.FileOption,System.Text.Encoding,System.Int32)
  id: Write(System.String,DotNetHelper_IO.Enum.FileOption,System.Text.Encoding,System.Int32)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: Write(String, FileOption, Encoding, Int32)
  nameWithType: FileObject.Write(String, FileOption, Encoding, Int32)
  fullName: DotNetHelper_IO.FileObject.Write(System.String, DotNetHelper_IO.Enum.FileOption, System.Text.Encoding, System.Int32)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: Write
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 701
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nWrites the content to file. Returns the full file name content was written to. This method is not thread safe\n"
  example: []
  syntax:
    content: public string Write(string content, FileOption option = FileOption.Overwrite, Encoding encoding = null, int bufferSize = 4096)
    parameters:
    - id: content
      type: System.String
      description: The content.
    - id: option
      type: DotNetHelper_IO.Enum.FileOption
      description: The option.
    - id: encoding
      type: System.Text.Encoding
      description: default to UTF-8
    - id: bufferSize
      type: System.Int32
      description: ''
    return:
      type: System.String
    content.vb: Public Function Write(content As String, option As FileOption = FileOption.Overwrite, encoding As Encoding = Nothing, bufferSize As Integer = 4096) As String
  overload: DotNetHelper_IO.FileObject.Write*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.Write(System.Byte[],DotNetHelper_IO.Enum.FileOption,System.Int32,System.Nullable{System.Int32})
  commentId: M:DotNetHelper_IO.FileObject.Write(System.Byte[],DotNetHelper_IO.Enum.FileOption,System.Int32,System.Nullable{System.Int32})
  id: Write(System.Byte[],DotNetHelper_IO.Enum.FileOption,System.Int32,System.Nullable{System.Int32})
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: Write(Byte[], FileOption, Int32, Nullable<Int32>)
  nameWithType: FileObject.Write(Byte[], FileOption, Int32, Nullable<Int32>)
  fullName: DotNetHelper_IO.FileObject.Write(System.Byte[], DotNetHelper_IO.Enum.FileOption, System.Int32, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: Write
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 717
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nWrites the bytes to file. Returns the full file name content was written to. This method is not thread safe\n"
  example: []
  syntax:
    content: public string Write(byte[] bytes, FileOption option = FileOption.Overwrite, int offset = 0, int? count = default(int? ))
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The bytes.
    - id: option
      type: DotNetHelper_IO.Enum.FileOption
      description: The option.
    - id: offset
      type: System.Int32
      description: ''
    - id: count
      type: System.Nullable{System.Int32}
      description: ''
    return:
      type: System.String
    content.vb: Public Function Write(bytes As Byte(), option As FileOption = FileOption.Overwrite, offset As Integer = 0, count As Integer? = Nothing) As String
  overload: DotNetHelper_IO.FileObject.Write*
  nameWithType.vb: FileObject.Write(Byte(), FileOption, Int32, Nullable(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper_IO.FileObject.Write(System.Byte(), DotNetHelper_IO.Enum.FileOption, System.Int32, System.Nullable(Of System.Int32))
  name.vb: Write(Byte(), FileOption, Int32, Nullable(Of Int32))
- uid: DotNetHelper_IO.FileObject.Write(System.IO.Stream,DotNetHelper_IO.Enum.FileOption,System.Int32)
  commentId: M:DotNetHelper_IO.FileObject.Write(System.IO.Stream,DotNetHelper_IO.Enum.FileOption,System.Int32)
  id: Write(System.IO.Stream,DotNetHelper_IO.Enum.FileOption,System.Int32)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: Write(Stream, FileOption, Int32)
  nameWithType: FileObject.Write(Stream, FileOption, Int32)
  fullName: DotNetHelper_IO.FileObject.Write(System.IO.Stream, DotNetHelper_IO.Enum.FileOption, System.Int32)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: Write
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 735
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nWrites the content to file. Returns the full file name content was written to. This method is not thread safe\n"
  example: []
  syntax:
    content: public string Write(Stream stream, FileOption option = FileOption.Overwrite, int bufferSize = 4096)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: ''
    - id: option
      type: DotNetHelper_IO.Enum.FileOption
      description: The option.
    - id: bufferSize
      type: System.Int32
      description: ''
    return:
      type: System.String
    content.vb: Public Function Write(stream As Stream, option As FileOption = FileOption.Overwrite, bufferSize As Integer = 4096) As String
  overload: DotNetHelper_IO.FileObject.Write*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.Write(System.IO.Stream,System.IProgress{System.Int64},DotNetHelper_IO.Enum.FileOption,System.Int32)
  commentId: M:DotNetHelper_IO.FileObject.Write(System.IO.Stream,System.IProgress{System.Int64},DotNetHelper_IO.Enum.FileOption,System.Int32)
  id: Write(System.IO.Stream,System.IProgress{System.Int64},DotNetHelper_IO.Enum.FileOption,System.Int32)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: Write(Stream, IProgress<Int64>, FileOption, Int32)
  nameWithType: FileObject.Write(Stream, IProgress<Int64>, FileOption, Int32)
  fullName: DotNetHelper_IO.FileObject.Write(System.IO.Stream, System.IProgress<System.Int64>, DotNetHelper_IO.Enum.FileOption, System.Int32)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: Write
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 751
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nWrites the content to file. Returns the full file name content was written to. This method is not thread safe\n"
  example: []
  syntax:
    content: public string Write(Stream stream, IProgress<long> progress, FileOption option = FileOption.Overwrite, int bufferSize = 4096)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: ''
    - id: progress
      type: System.IProgress{System.Int64}
      description: 'Report progress in stream bytes not percentages. '
    - id: option
      type: DotNetHelper_IO.Enum.FileOption
      description: The option.
    - id: bufferSize
      type: System.Int32
      description: ''
    return:
      type: System.String
    content.vb: Public Function Write(stream As Stream, progress As IProgress(Of Long), option As FileOption = FileOption.Overwrite, bufferSize As Integer = 4096) As String
  overload: DotNetHelper_IO.FileObject.Write*
  nameWithType.vb: FileObject.Write(Stream, IProgress(Of Int64), FileOption, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper_IO.FileObject.Write(System.IO.Stream, System.IProgress(Of System.Int64), DotNetHelper_IO.Enum.FileOption, System.Int32)
  name.vb: Write(Stream, IProgress(Of Int64), FileOption, Int32)
- uid: DotNetHelper_IO.FileObject.WriteAsync(System.String,DotNetHelper_IO.Enum.FileOption,System.Text.Encoding,System.Int32)
  commentId: M:DotNetHelper_IO.FileObject.WriteAsync(System.String,DotNetHelper_IO.Enum.FileOption,System.Text.Encoding,System.Int32)
  id: WriteAsync(System.String,DotNetHelper_IO.Enum.FileOption,System.Text.Encoding,System.Int32)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: WriteAsync(String, FileOption, Encoding, Int32)
  nameWithType: FileObject.WriteAsync(String, FileOption, Encoding, Int32)
  fullName: DotNetHelper_IO.FileObject.WriteAsync(System.String, DotNetHelper_IO.Enum.FileOption, System.Text.Encoding, System.Int32)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: WriteAsync
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 769
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nWrites the content to file. Returns the full file name content was written to. \n"
  example: []
  syntax:
    content: public Task<string> WriteAsync(string content, FileOption option, Encoding encoding, int bufferSize = 4096)
    parameters:
    - id: content
      type: System.String
      description: The content.
    - id: option
      type: DotNetHelper_IO.Enum.FileOption
      description: The option.
    - id: encoding
      type: System.Text.Encoding
      description: ''
    - id: bufferSize
      type: System.Int32
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function WriteAsync(content As String, option As FileOption, encoding As Encoding, bufferSize As Integer = 4096) As Task(Of String)
  overload: DotNetHelper_IO.FileObject.WriteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.WriteAsync(System.Byte[],DotNetHelper_IO.Enum.FileOption,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)
  commentId: M:DotNetHelper_IO.FileObject.WriteAsync(System.Byte[],DotNetHelper_IO.Enum.FileOption,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],DotNetHelper_IO.Enum.FileOption,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: WriteAsync(Byte[], FileOption, Int32, Nullable<Int32>, CancellationToken)
  nameWithType: FileObject.WriteAsync(Byte[], FileOption, Int32, Nullable<Int32>, CancellationToken)
  fullName: DotNetHelper_IO.FileObject.WriteAsync(System.Byte[], DotNetHelper_IO.Enum.FileOption, System.Int32, System.Nullable<System.Int32>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: WriteAsync
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 787
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nWrites the bytes to file. Returns the full file name content was written to. This method is not thread safe\n"
  example: []
  syntax:
    content: public Task<string> WriteAsync(byte[] bytes, FileOption option = FileOption.Overwrite, int offset = 0, int? count = default(int? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The bytes.
    - id: option
      type: DotNetHelper_IO.Enum.FileOption
      description: The option.
    - id: offset
      type: System.Int32
      description: ''
    - id: count
      type: System.Nullable{System.Int32}
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function WriteAsync(bytes As Byte(), option As FileOption = FileOption.Overwrite, offset As Integer = 0, count As Integer? = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: DotNetHelper_IO.FileObject.WriteAsync*
  nameWithType.vb: FileObject.WriteAsync(Byte(), FileOption, Int32, Nullable(Of Int32), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper_IO.FileObject.WriteAsync(System.Byte(), DotNetHelper_IO.Enum.FileOption, System.Int32, System.Nullable(Of System.Int32), System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), FileOption, Int32, Nullable(Of Int32), CancellationToken)
- uid: DotNetHelper_IO.FileObject.WriteAsync(System.IO.Stream,DotNetHelper_IO.Enum.FileOption,System.Int32,System.Threading.CancellationToken)
  commentId: M:DotNetHelper_IO.FileObject.WriteAsync(System.IO.Stream,DotNetHelper_IO.Enum.FileOption,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.IO.Stream,DotNetHelper_IO.Enum.FileOption,System.Int32,System.Threading.CancellationToken)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: WriteAsync(Stream, FileOption, Int32, CancellationToken)
  nameWithType: FileObject.WriteAsync(Stream, FileOption, Int32, CancellationToken)
  fullName: DotNetHelper_IO.FileObject.WriteAsync(System.IO.Stream, DotNetHelper_IO.Enum.FileOption, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: WriteAsync
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 806
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nWrites the content to file. Returns the full file name content was written to. This method is not thread safe\n"
  example: []
  syntax:
    content: public Task<string> WriteAsync(Stream stream, FileOption option = FileOption.Overwrite, int bufferSize = 4096, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: stream
      type: System.IO.Stream
      description: ''
    - id: option
      type: DotNetHelper_IO.Enum.FileOption
      description: The option.
    - id: bufferSize
      type: System.Int32
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function WriteAsync(stream As Stream, option As FileOption = FileOption.Overwrite, bufferSize As Integer = 4096, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: DotNetHelper_IO.FileObject.WriteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.WriteAsync(System.IO.Stream,System.IProgress{System.Int64},DotNetHelper_IO.Enum.FileOption,System.Int32,System.Threading.CancellationToken)
  commentId: M:DotNetHelper_IO.FileObject.WriteAsync(System.IO.Stream,System.IProgress{System.Int64},DotNetHelper_IO.Enum.FileOption,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.IO.Stream,System.IProgress{System.Int64},DotNetHelper_IO.Enum.FileOption,System.Int32,System.Threading.CancellationToken)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: WriteAsync(Stream, IProgress<Int64>, FileOption, Int32, CancellationToken)
  nameWithType: FileObject.WriteAsync(Stream, IProgress<Int64>, FileOption, Int32, CancellationToken)
  fullName: DotNetHelper_IO.FileObject.WriteAsync(System.IO.Stream, System.IProgress<System.Int64>, DotNetHelper_IO.Enum.FileOption, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: WriteAsync
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 824
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nWrites the content to file. Returns the full file name content was written to. This method is not thread safe\n"
  example: []
  syntax:
    content: public Task<string> WriteAsync(Stream stream, IProgress<long> progress, FileOption option = FileOption.Overwrite, int bufferSize = 4096, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: stream
      type: System.IO.Stream
      description: ''
    - id: progress
      type: System.IProgress{System.Int64}
      description: ''
    - id: option
      type: DotNetHelper_IO.Enum.FileOption
      description: The option.
    - id: bufferSize
      type: System.Int32
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function WriteAsync(stream As Stream, progress As IProgress(Of Long), option As FileOption = FileOption.Overwrite, bufferSize As Integer = 4096, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: DotNetHelper_IO.FileObject.WriteAsync*
  nameWithType.vb: FileObject.WriteAsync(Stream, IProgress(Of Int64), FileOption, Int32, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper_IO.FileObject.WriteAsync(System.IO.Stream, System.IProgress(Of System.Int64), DotNetHelper_IO.Enum.FileOption, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Stream, IProgress(Of Int64), FileOption, Int32, CancellationToken)
- uid: DotNetHelper_IO.FileObject.GetFileEncoding
  commentId: M:DotNetHelper_IO.FileObject.GetFileEncoding
  id: GetFileEncoding
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: GetFileEncoding()
  nameWithType: FileObject.GetFileEncoding()
  fullName: DotNetHelper_IO.FileObject.GetFileEncoding()
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: GetFileEncoding
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 842
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nGets the file encoding. if can not determine the file Encoding this return ascii by default\n"
  example: []
  syntax:
    content: public Encoding GetFileEncoding()
    return:
      type: System.Text.Encoding
      description: Encoding.
    content.vb: Public Function GetFileEncoding As Encoding
  overload: DotNetHelper_IO.FileObject.GetFileEncoding*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.GetFileSize(System.Boolean)
  commentId: M:DotNetHelper_IO.FileObject.GetFileSize(System.Boolean)
  id: GetFileSize(System.Boolean)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: GetFileSize(Boolean)
  nameWithType: FileObject.GetFileSize(Boolean)
  fullName: DotNetHelper_IO.FileObject.GetFileSize(System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: GetFileSize
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 868
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nGets the file size display.\n"
  example: []
  syntax:
    content: public string GetFileSize(bool refreshObject = false)
    parameters:
    - id: refreshObject
      type: System.Boolean
    return:
      type: System.String
      description: System.String.
    content.vb: Public Function GetFileSize(refreshObject As Boolean = False) As String
  overload: DotNetHelper_IO.FileObject.GetFileSize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.GetFileSize(DotNetHelper_IO.Enum.SizeUnits,System.Boolean)
  commentId: M:DotNetHelper_IO.FileObject.GetFileSize(DotNetHelper_IO.Enum.SizeUnits,System.Boolean)
  id: GetFileSize(DotNetHelper_IO.Enum.SizeUnits,System.Boolean)
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: GetFileSize(SizeUnits, Boolean)
  nameWithType: FileObject.GetFileSize(SizeUnits, Boolean)
  fullName: DotNetHelper_IO.FileObject.GetFileSize(DotNetHelper_IO.Enum.SizeUnits, System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: GetFileSize
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 898
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nGets the file size display.\n"
  example: []
  syntax:
    content: public long? GetFileSize(SizeUnits sizeUnits, bool refreshObject = false)
    parameters:
    - id: sizeUnits
      type: DotNetHelper_IO.Enum.SizeUnits
    - id: refreshObject
      type: System.Boolean
    return:
      type: System.Nullable{System.Int64}
      description: System.String.
    content.vb: Public Function GetFileSize(sizeUnits As SizeUnits, refreshObject As Boolean = False) As Long?
  overload: DotNetHelper_IO.FileObject.GetFileSize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.StartWatching(System.IO.WatcherChangeTypes,System.Boolean,System.Nullable{System.IO.NotifyFilters})
  commentId: M:DotNetHelper_IO.FileObject.StartWatching(System.IO.WatcherChangeTypes,System.Boolean,System.Nullable{System.IO.NotifyFilters})
  id: StartWatching(System.IO.WatcherChangeTypes,System.Boolean,System.Nullable{System.IO.NotifyFilters})
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: StartWatching(WatcherChangeTypes, Boolean, Nullable<NotifyFilters>)
  nameWithType: FileObject.StartWatching(WatcherChangeTypes, Boolean, Nullable<NotifyFilters>)
  fullName: DotNetHelper_IO.FileObject.StartWatching(System.IO.WatcherChangeTypes, System.Boolean, System.Nullable<System.IO.NotifyFilters>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: StartWatching
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 927
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nStarts the watching.\n"
  example: []
  syntax:
    content: public void StartWatching(WatcherChangeTypes changeTypes = WatcherChangeTypes.Created | WatcherChangeTypes.Deleted | WatcherChangeTypes.Changed | WatcherChangeTypes.Renamed | WatcherChangeTypes.All, bool onNewThread = true, NotifyFilters? filters = default(NotifyFilters? ))
    parameters:
    - id: changeTypes
      type: System.IO.WatcherChangeTypes
      description: The change types.
    - id: onNewThread
      type: System.Boolean
      description: if set to <code>true</code> [on new thread].
    - id: filters
      type: System.Nullable{System.IO.NotifyFilters}
    content.vb: Public Sub StartWatching(changeTypes As WatcherChangeTypes = WatcherChangeTypes.Created Or WatcherChangeTypes.Deleted Or WatcherChangeTypes.Changed Or WatcherChangeTypes.Renamed Or WatcherChangeTypes.All, onNewThread As Boolean = True, filters As NotifyFilters? = Nothing)
  overload: DotNetHelper_IO.FileObject.StartWatching*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
  nameWithType.vb: FileObject.StartWatching(WatcherChangeTypes, Boolean, Nullable(Of NotifyFilters))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper_IO.FileObject.StartWatching(System.IO.WatcherChangeTypes, System.Boolean, System.Nullable(Of System.IO.NotifyFilters))
  name.vb: StartWatching(WatcherChangeTypes, Boolean, Nullable(Of NotifyFilters))
- uid: DotNetHelper_IO.FileObject.StopWatching
  commentId: M:DotNetHelper_IO.FileObject.StopWatching
  id: StopWatching
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: StopWatching()
  nameWithType: FileObject.StopWatching()
  fullName: DotNetHelper_IO.FileObject.StopWatching()
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: StopWatching
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 952
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nStops the watching.\n"
  example: []
  syntax:
    content: public void StopWatching()
    content.vb: Public Sub StopWatching
  overload: DotNetHelper_IO.FileObject.StopWatching*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_IO.FileObject.SetFileAttribute(DotNetHelper_IO.Enum.AddOrRemoveEnum,System.Collections.Generic.List{System.IO.FileAttributes})
  commentId: M:DotNetHelper_IO.FileObject.SetFileAttribute(DotNetHelper_IO.Enum.AddOrRemoveEnum,System.Collections.Generic.List{System.IO.FileAttributes})
  id: SetFileAttribute(DotNetHelper_IO.Enum.AddOrRemoveEnum,System.Collections.Generic.List{System.IO.FileAttributes})
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: SetFileAttribute(AddOrRemoveEnum, List<FileAttributes>)
  nameWithType: FileObject.SetFileAttribute(AddOrRemoveEnum, List<FileAttributes>)
  fullName: DotNetHelper_IO.FileObject.SetFileAttribute(DotNetHelper_IO.Enum.AddOrRemoveEnum, System.Collections.Generic.List<System.IO.FileAttributes>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: SetFileAttribute
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 974
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nSets the file attribute.\n"
  example: []
  syntax:
    content: public void SetFileAttribute(AddOrRemoveEnum option, List<FileAttributes> list)
    parameters:
    - id: option
      type: DotNetHelper_IO.Enum.AddOrRemoveEnum
      description: The option.
    - id: list
      type: System.Collections.Generic.List{System.IO.FileAttributes}
      description: The list.
    content.vb: Public Sub SetFileAttribute(option As AddOrRemoveEnum, list As List(Of FileAttributes))
  overload: DotNetHelper_IO.FileObject.SetFileAttribute*
  nameWithType.vb: FileObject.SetFileAttribute(AddOrRemoveEnum, List(Of FileAttributes))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DotNetHelper_IO.FileObject.SetFileAttribute(DotNetHelper_IO.Enum.AddOrRemoveEnum, System.Collections.Generic.List(Of System.IO.FileAttributes))
  name.vb: SetFileAttribute(AddOrRemoveEnum, List(Of FileAttributes))
- uid: DotNetHelper_IO.FileObject.Dispose
  commentId: M:DotNetHelper_IO.FileObject.Dispose
  id: Dispose
  parent: DotNetHelper_IO.FileObject
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: FileObject.Dispose()
  fullName: DotNetHelper_IO.FileObject.Dispose()
  type: Method
  source:
    remote:
      path: src/DotNetHelper-IO/FileObject.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-IO
    id: Dispose
    path: ../src/DotNetHelper-IO/FileObject.cs
    startLine: 1019
  assemblies:
  - DotNetHelper-IO
  namespace: DotNetHelper_IO
  summary: "\nPerforms application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: DotNetHelper_IO.FileObject.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: DotNetHelper_IO
  commentId: N:DotNetHelper_IO
  name: DotNetHelper_IO
  nameWithType: DotNetHelper_IO
  fullName: DotNetHelper_IO
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DotNetHelper_IO.FileObject.DefaultEncoding*
  commentId: Overload:DotNetHelper_IO.FileObject.DefaultEncoding
  name: DefaultEncoding
  nameWithType: FileObject.DefaultEncoding
  fullName: DotNetHelper_IO.FileObject.DefaultEncoding
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: DotNetHelper_IO.FileObject.FileInfo*
  commentId: Overload:DotNetHelper_IO.FileObject.FileInfo
  name: FileInfo
  nameWithType: FileObject.FileInfo
  fullName: DotNetHelper_IO.FileObject.FileInfo
- uid: System.IO.FileInfo
  commentId: T:System.IO.FileInfo
  parent: System.IO
  isExternal: true
  name: FileInfo
  nameWithType: FileInfo
  fullName: System.IO.FileInfo
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: DotNetHelper_IO.FileObject.FileNameOnly*
  commentId: Overload:DotNetHelper_IO.FileObject.FileNameOnly
  name: FileNameOnly
  nameWithType: FileObject.FileNameOnly
  fullName: DotNetHelper_IO.FileObject.FileNameOnly
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DotNetHelper_IO.FileObject.FileNameOnlyNoExtension*
  commentId: Overload:DotNetHelper_IO.FileObject.FileNameOnlyNoExtension
  name: FileNameOnlyNoExtension
  nameWithType: FileObject.FileNameOnlyNoExtension
  fullName: DotNetHelper_IO.FileObject.FileNameOnlyNoExtension
- uid: DotNetHelper_IO.FileObject.FilePathOnly*
  commentId: Overload:DotNetHelper_IO.FileObject.FilePathOnly
  name: FilePathOnly
  nameWithType: FileObject.FilePathOnly
  fullName: DotNetHelper_IO.FileObject.FilePathOnly
- uid: DotNetHelper_IO.FileObject.FullFilePath*
  commentId: Overload:DotNetHelper_IO.FileObject.FullFilePath
  name: FullFilePath
  nameWithType: FileObject.FullFilePath
  fullName: DotNetHelper_IO.FileObject.FullFilePath
- uid: DotNetHelper_IO.FileObject.Extension*
  commentId: Overload:DotNetHelper_IO.FileObject.Extension
  name: Extension
  nameWithType: FileObject.Extension
  fullName: DotNetHelper_IO.FileObject.Extension
- uid: DotNetHelper_IO.FileObject.FolderNameOnly*
  commentId: Overload:DotNetHelper_IO.FileObject.FolderNameOnly
  name: FolderNameOnly
  nameWithType: FileObject.FolderNameOnly
  fullName: DotNetHelper_IO.FileObject.FolderNameOnly
- uid: DotNetHelper_IO.FileObject.FileSize*
  commentId: Overload:DotNetHelper_IO.FileObject.FileSize
  name: FileSize
  nameWithType: FileObject.FileSize
  fullName: DotNetHelper_IO.FileObject.FileSize
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_IO.FileObject
  commentId: T:DotNetHelper_IO.FileObject
  parent: DotNetHelper_IO
  name: FileObject
  nameWithType: FileObject
  fullName: DotNetHelper_IO.FileObject
- uid: DotNetHelper_IO.FileObject.Exist*
  commentId: Overload:DotNetHelper_IO.FileObject.Exist
  name: Exist
  nameWithType: FileObject.Exist
  fullName: DotNetHelper_IO.FileObject.Exist
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DotNetHelper_IO.FileObject.WatchTimeout*
  commentId: Overload:DotNetHelper_IO.FileObject.WatchTimeout
  name: WatchTimeout
  nameWithType: FileObject.WatchTimeout
  fullName: DotNetHelper_IO.FileObject.WatchTimeout
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: DotNetHelper_IO.FileObject.Watcher*
  commentId: Overload:DotNetHelper_IO.FileObject.Watcher
  name: Watcher
  nameWithType: FileObject.Watcher
  fullName: DotNetHelper_IO.FileObject.Watcher
- uid: System.IO.FileSystemWatcher
  commentId: T:System.IO.FileSystemWatcher
  parent: System.IO
  isExternal: true
  name: FileSystemWatcher
  nameWithType: FileSystemWatcher
  fullName: System.IO.FileSystemWatcher
- uid: DotNetHelper_IO.FileObject.NotifyFilters*
  commentId: Overload:DotNetHelper_IO.FileObject.NotifyFilters
  name: NotifyFilters
  nameWithType: FileObject.NotifyFilters
  fullName: DotNetHelper_IO.FileObject.NotifyFilters
- uid: System.IO.NotifyFilters
  commentId: T:System.IO.NotifyFilters
  parent: System.IO
  isExternal: true
  name: NotifyFilters
  nameWithType: NotifyFilters
  fullName: System.IO.NotifyFilters
- uid: DotNetHelper_IO.FileObject.#ctor*
  commentId: Overload:DotNetHelper_IO.FileObject.#ctor
  name: FileObject
  nameWithType: FileObject.FileObject
  fullName: DotNetHelper_IO.FileObject.FileObject
- uid: DotNetHelper_IO.FileObject.Init*
  commentId: Overload:DotNetHelper_IO.FileObject.Init
  name: Init
  nameWithType: FileObject.Init
  fullName: DotNetHelper_IO.FileObject.Init
- uid: DotNetHelper_IO.FileObject.RefreshObject*
  commentId: Overload:DotNetHelper_IO.FileObject.RefreshObject
  name: RefreshObject
  nameWithType: FileObject.RefreshObject
  fullName: DotNetHelper_IO.FileObject.RefreshObject
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
  isExternal: true
- uid: DotNetHelper_IO.FileObject.CopyTo*
  commentId: Overload:DotNetHelper_IO.FileObject.CopyTo
  name: CopyTo
  nameWithType: FileObject.CopyTo
  fullName: DotNetHelper_IO.FileObject.CopyTo
- uid: DotNetHelper_IO.Enum.FileOption
  commentId: T:DotNetHelper_IO.Enum.FileOption
  parent: DotNetHelper_IO.Enum
  name: FileOption
  nameWithType: FileOption
  fullName: DotNetHelper_IO.Enum.FileOption
- uid: DotNetHelper_IO.Enum
  commentId: N:DotNetHelper_IO.Enum
  name: DotNetHelper_IO.Enum
  nameWithType: DotNetHelper_IO.Enum
  fullName: DotNetHelper_IO.Enum
- uid: DotNetHelper_IO.FileObject.CopyToAsync*
  commentId: Overload:DotNetHelper_IO.FileObject.CopyToAsync
  name: CopyToAsync
  nameWithType: FileObject.CopyToAsync
  fullName: DotNetHelper_IO.FileObject.CopyToAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.IProgress{System.Int64}
  commentId: T:System.IProgress{System.Int64}
  parent: System
  definition: System.IProgress`1
  name: IProgress<Int64>
  nameWithType: IProgress<Int64>
  fullName: System.IProgress<System.Int64>
  nameWithType.vb: IProgress(Of Int64)
  fullName.vb: System.IProgress(Of System.Int64)
  name.vb: IProgress(Of Int64)
  spec.csharp:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IProgress`1
  commentId: T:System.IProgress`1
  isExternal: true
  name: IProgress<T>
  nameWithType: IProgress<T>
  fullName: System.IProgress<T>
  nameWithType.vb: IProgress(Of T)
  fullName.vb: System.IProgress(Of T)
  name.vb: IProgress(Of T)
  spec.csharp:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception
  commentId: T:System.Exception
  isExternal: true
- uid: DotNetHelper_IO.FileObject.MoveTo*
  commentId: Overload:DotNetHelper_IO.FileObject.MoveTo
  name: MoveTo
  nameWithType: FileObject.MoveTo
  fullName: DotNetHelper_IO.FileObject.MoveTo
- uid: DotNetHelper_IO.FileObject.MoveToAsync*
  commentId: Overload:DotNetHelper_IO.FileObject.MoveToAsync
  name: MoveToAsync
  nameWithType: FileObject.MoveToAsync
  fullName: DotNetHelper_IO.FileObject.MoveToAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_IO.FileObject.ChangeExtension*
  commentId: Overload:DotNetHelper_IO.FileObject.ChangeExtension
  name: ChangeExtension
  nameWithType: FileObject.ChangeExtension
  fullName: DotNetHelper_IO.FileObject.ChangeExtension
- uid: System.IProgress{System.Double}
  commentId: T:System.IProgress{System.Double}
  parent: System
  definition: System.IProgress`1
  name: IProgress<Double>
  nameWithType: IProgress<Double>
  fullName: System.IProgress<System.Double>
  nameWithType.vb: IProgress(Of Double)
  fullName.vb: System.IProgress(Of System.Double)
  name.vb: IProgress(Of Double)
  spec.csharp:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_IO.FileObject.ChangeExtensionAsync*
  commentId: Overload:DotNetHelper_IO.FileObject.ChangeExtensionAsync
  name: ChangeExtensionAsync
  nameWithType: FileObject.ChangeExtensionAsync
  fullName: DotNetHelper_IO.FileObject.ChangeExtensionAsync
- uid: DotNetHelper_IO.FileObject.DeleteFile*
  commentId: Overload:DotNetHelper_IO.FileObject.DeleteFile
  name: DeleteFile
  nameWithType: FileObject.DeleteFile
  fullName: DotNetHelper_IO.FileObject.DeleteFile
- uid: DotNetHelper_IO.FileObject.CreateOrTruncate*
  commentId: Overload:DotNetHelper_IO.FileObject.CreateOrTruncate
  name: CreateOrTruncate
  nameWithType: FileObject.CreateOrTruncate
  fullName: DotNetHelper_IO.FileObject.CreateOrTruncate
- uid: DotNetHelper_IO.FileObject.GetIncrementFileName*
  commentId: Overload:DotNetHelper_IO.FileObject.GetIncrementFileName
  name: GetIncrementFileName
  nameWithType: FileObject.GetIncrementFileName
  fullName: DotNetHelper_IO.FileObject.GetIncrementFileName
- uid: DotNetHelper_IO.FileObject.GetIncrementExtension*
  commentId: Overload:DotNetHelper_IO.FileObject.GetIncrementExtension
  name: GetIncrementExtension
  nameWithType: FileObject.GetIncrementExtension
  fullName: DotNetHelper_IO.FileObject.GetIncrementExtension
- uid: DotNetHelper_IO.FileObject.ReadAllLines*
  commentId: Overload:DotNetHelper_IO.FileObject.ReadAllLines
  name: ReadAllLines
  nameWithType: FileObject.ReadAllLines
  fullName: DotNetHelper_IO.FileObject.ReadAllLines
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: DotNetHelper_IO.FileObject.ReadToString*
  commentId: Overload:DotNetHelper_IO.FileObject.ReadToString
  name: ReadToString
  nameWithType: FileObject.ReadToString
  fullName: DotNetHelper_IO.FileObject.ReadToString
- uid: System.IO.FileNotFoundException
  commentId: T:System.IO.FileNotFoundException
  isExternal: true
- uid: DotNetHelper_IO.FileObject.GetFileStream*
  commentId: Overload:DotNetHelper_IO.FileObject.GetFileStream
  name: GetFileStream
  nameWithType: FileObject.GetFileStream
  fullName: DotNetHelper_IO.FileObject.GetFileStream
- uid: System.ValueTuple{System.IO.FileStream,System.String}
  commentId: T:System.ValueTuple{System.IO.FileStream,System.String}
  parent: System
  isExternal: true
  name: ValueTuple<FileStream, String>
  nameWithType: ValueTuple<FileStream, String>
  fullName: System.ValueTuple<System.IO.FileStream, System.String>
  nameWithType.vb: ValueTuple(Of FileStream, String)
  fullName.vb: System.ValueTuple(Of System.IO.FileStream, System.String)
  name.vb: ValueTuple(Of FileStream, String)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.FileStream
    name: FileStream
    nameWithType: FileStream
    fullName: System.IO.FileStream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IO.FileStream
    name: FileStream
    nameWithType: FileStream
    fullName: System.IO.FileStream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_IO.FileObject.Write*
  commentId: Overload:DotNetHelper_IO.FileObject.Write
  name: Write
  nameWithType: FileObject.Write
  fullName: DotNetHelper_IO.FileObject.Write
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: DotNetHelper_IO.FileObject.WriteAsync*
  commentId: Overload:DotNetHelper_IO.FileObject.WriteAsync
  name: WriteAsync
  nameWithType: FileObject.WriteAsync
  fullName: DotNetHelper_IO.FileObject.WriteAsync
- uid: DotNetHelper_IO.FileObject.GetFileEncoding*
  commentId: Overload:DotNetHelper_IO.FileObject.GetFileEncoding
  name: GetFileEncoding
  nameWithType: FileObject.GetFileEncoding
  fullName: DotNetHelper_IO.FileObject.GetFileEncoding
- uid: DotNetHelper_IO.FileObject.GetFileSize*
  commentId: Overload:DotNetHelper_IO.FileObject.GetFileSize
  name: GetFileSize
  nameWithType: FileObject.GetFileSize
  fullName: DotNetHelper_IO.FileObject.GetFileSize
- uid: DotNetHelper_IO.Enum.SizeUnits
  commentId: T:DotNetHelper_IO.Enum.SizeUnits
  parent: DotNetHelper_IO.Enum
  name: SizeUnits
  nameWithType: SizeUnits
  fullName: DotNetHelper_IO.Enum.SizeUnits
- uid: DotNetHelper_IO.FileObject.StartWatching*
  commentId: Overload:DotNetHelper_IO.FileObject.StartWatching
  name: StartWatching
  nameWithType: FileObject.StartWatching
  fullName: DotNetHelper_IO.FileObject.StartWatching
- uid: System.IO.WatcherChangeTypes
  commentId: T:System.IO.WatcherChangeTypes
  parent: System.IO
  isExternal: true
  name: WatcherChangeTypes
  nameWithType: WatcherChangeTypes
  fullName: System.IO.WatcherChangeTypes
- uid: System.Nullable{System.IO.NotifyFilters}
  commentId: T:System.Nullable{System.IO.NotifyFilters}
  parent: System
  definition: System.Nullable`1
  name: Nullable<NotifyFilters>
  nameWithType: Nullable<NotifyFilters>
  fullName: System.Nullable<System.IO.NotifyFilters>
  nameWithType.vb: Nullable(Of NotifyFilters)
  fullName.vb: System.Nullable(Of System.IO.NotifyFilters)
  name.vb: Nullable(Of NotifyFilters)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.NotifyFilters
    name: NotifyFilters
    nameWithType: NotifyFilters
    fullName: System.IO.NotifyFilters
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IO.NotifyFilters
    name: NotifyFilters
    nameWithType: NotifyFilters
    fullName: System.IO.NotifyFilters
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_IO.FileObject.StopWatching*
  commentId: Overload:DotNetHelper_IO.FileObject.StopWatching
  name: StopWatching
  nameWithType: FileObject.StopWatching
  fullName: DotNetHelper_IO.FileObject.StopWatching
- uid: DotNetHelper_IO.FileObject.SetFileAttribute*
  commentId: Overload:DotNetHelper_IO.FileObject.SetFileAttribute
  name: SetFileAttribute
  nameWithType: FileObject.SetFileAttribute
  fullName: DotNetHelper_IO.FileObject.SetFileAttribute
- uid: DotNetHelper_IO.Enum.AddOrRemoveEnum
  commentId: T:DotNetHelper_IO.Enum.AddOrRemoveEnum
  parent: DotNetHelper_IO.Enum
  name: AddOrRemoveEnum
  nameWithType: AddOrRemoveEnum
  fullName: DotNetHelper_IO.Enum.AddOrRemoveEnum
- uid: System.Collections.Generic.List{System.IO.FileAttributes}
  commentId: T:System.Collections.Generic.List{System.IO.FileAttributes}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<FileAttributes>
  nameWithType: List<FileAttributes>
  fullName: System.Collections.Generic.List<System.IO.FileAttributes>
  nameWithType.vb: List(Of FileAttributes)
  fullName.vb: System.Collections.Generic.List(Of System.IO.FileAttributes)
  name.vb: List(Of FileAttributes)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.FileAttributes
    name: FileAttributes
    nameWithType: FileAttributes
    fullName: System.IO.FileAttributes
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IO.FileAttributes
    name: FileAttributes
    nameWithType: FileAttributes
    fullName: System.IO.FileAttributes
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: DotNetHelper_IO.FileObject.Dispose*
  commentId: Overload:DotNetHelper_IO.FileObject.Dispose
  name: Dispose
  nameWithType: FileObject.Dispose
  fullName: DotNetHelper_IO.FileObject.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
