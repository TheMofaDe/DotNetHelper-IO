{
  "api/DotNetHelper_IO.Enum.AddOrRemoveEnum.html": {
    "href": "api/DotNetHelper_IO.Enum.AddOrRemoveEnum.html",
    "title": "Enum AddOrRemoveEnum | DotNetHelper-IO",
    "keywords": "Enum AddOrRemoveEnum Enum AddOrRemoveEnum Namespace : DotNetHelper_IO.Enum Assembly : DotNetHelper-IO.dll Syntax public enum AddOrRemoveEnum Fields Name Description Add The add Remove The remove"
  },
  "api/DotNetHelper_IO.Enum.FileOption.html": {
    "href": "api/DotNetHelper_IO.Enum.FileOption.html",
    "title": "Enum FileOption | DotNetHelper-IO",
    "keywords": "Enum FileOption Enum FileOption Namespace : DotNetHelper_IO.Enum Assembly : DotNetHelper-IO.dll Syntax public enum FileOption Fields Name Description Append The append DoNothingIfExist The do nothing if exist IncrementFileExtensionIfExist Increments the file extension +1 IncrementFileNameIfExist Increment the file name +1 Overwrite The overwrite ReadOnly Read Only Access"
  },
  "api/DotNetHelper_IO.Enum.FolderOption.html": {
    "href": "api/DotNetHelper_IO.Enum.FolderOption.html",
    "title": "Enum FolderOption | DotNetHelper-IO",
    "keywords": "Enum FolderOption Enum FileOption Namespace : DotNetHelper_IO.Enum Assembly : DotNetHelper-IO.dll Syntax public enum FolderOption Fields Name Description DoNothingIfExist The do nothing if exist IncrementFolderNameIfExist Overwrite The overwrite"
  },
  "api/DotNetHelper_IO.Enum.html": {
    "href": "api/DotNetHelper_IO.Enum.html",
    "title": "Namespace DotNetHelper_IO.Enum | DotNetHelper-IO",
    "keywords": "Namespace DotNetHelper_IO.Enum Enums AddOrRemoveEnum Enum AddOrRemoveEnum FileOption Enum FileOption FolderOption Enum FileOption IOType PathType SizeUnits"
  },
  "api/DotNetHelper_IO.Enum.IOType.html": {
    "href": "api/DotNetHelper_IO.Enum.IOType.html",
    "title": "Enum IOType | DotNetHelper-IO",
    "keywords": "Enum IOType Namespace : DotNetHelper_IO.Enum Assembly : DotNetHelper-IO.dll Syntax public enum IOType Fields Name Description Both File Folder"
  },
  "api/DotNetHelper_IO.Enum.PathType.html": {
    "href": "api/DotNetHelper_IO.Enum.PathType.html",
    "title": "Enum PathType | DotNetHelper-IO",
    "keywords": "Enum PathType Namespace : DotNetHelper_IO.Enum Assembly : DotNetHelper-IO.dll Syntax public enum PathType Fields Name Description File Folder None Zip"
  },
  "api/DotNetHelper_IO.Enum.SizeUnits.html": {
    "href": "api/DotNetHelper_IO.Enum.SizeUnits.html",
    "title": "Enum SizeUnits | DotNetHelper-IO",
    "keywords": "Enum SizeUnits Namespace : DotNetHelper_IO.Enum Assembly : DotNetHelper-IO.dll Syntax public enum SizeUnits Fields Name Description Byte Eb Gb Kb Mb Pb Tb Yb Zb"
  },
  "api/DotNetHelper_IO.FileObject.html": {
    "href": "api/DotNetHelper_IO.FileObject.html",
    "title": "Class FileObject | DotNetHelper-IO",
    "keywords": "Class FileObject Class FileObject. Inheritance Object PathObject FileObject ZipFileObject Implements IDisposable Inherited Members PathObject.FullName PathObject.PathType PathObject.Size PathObject.Exist Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper_IO Assembly : DotNetHelper-IO.dll Syntax public class FileObject : PathObject, IDisposable Constructors | Improve this Doc View Source FileObject(FileInfo, Encoding) Initializes a new instance of the FileObject class. Declaration public FileObject(FileInfo fileInfo, Encoding defaultEncoding = null) Parameters Type Name Description FileInfo fileInfo Encoding defaultEncoding | Improve this Doc View Source FileObject(String, Encoding) Initializes a new instance of the FileObject class. Declaration public FileObject(string file, Encoding defaultEncoding = null) Parameters Type Name Description String file The file. Encoding defaultEncoding Properties | Improve this Doc View Source DefaultEncoding Declaration public Encoding DefaultEncoding { get; } Property Value Type Description Encoding | Improve this Doc View Source Extension Gets the full file path. Declaration public string Extension { get; } Property Value Type Description String The full file path. | Improve this Doc View Source FileInfo Declaration public FileInfo FileInfo { get; } Property Value Type Description FileInfo | Improve this Doc View Source FileNameOnly Gets the file name only. Declaration public string FileNameOnly { get; } Property Value Type Description String The file name only. | Improve this Doc View Source FileNameOnlyNoExtension Gets the file name only no extension. Declaration public string FileNameOnlyNoExtension { get; } Property Value Type Description String The file name only no extension. | Improve this Doc View Source FilePathOnly Gets the file path only. Declaration public string FilePathOnly { get; } Property Value Type Description String The file path only. | Improve this Doc View Source FolderNameOnly Gets the folder name only. Declaration public string FolderNameOnly { get; } Property Value Type Description String The folder name only. | Improve this Doc View Source Name Size is in bytes Declaration public override string Name { get; } Property Value Type Description String The size of the file. Overrides PathObject.Name | Improve this Doc View Source NotifyFilters Gets or sets the notify filters. Declaration public NotifyFilters NotifyFilters { get; set; } Property Value Type Description NotifyFilters The notify filters. | Improve this Doc View Source Watcher Gets the watcher. Declaration public FileSystemWatcher Watcher { get; } Property Value Type Description FileSystemWatcher The watcher. | Improve this Doc View Source WatchTimeout Gets or sets the watch timeout. Declaration public int WatchTimeout { get; set; } Property Value Type Description Int32 The watch timeout. Methods | Improve this Doc View Source ChangeExtension(String, FileOption, IProgress<Double>) Changes the extension of the current file. Does nothing if file doesn't exist return boolean on whether or not the file extension actually got change Declaration public bool ChangeExtension(string newExtension, FileOption option, IProgress<double> progress = null) Parameters Type Name Description String newExtension FileOption option IProgress < Double > progress Returns Type Description Boolean Exceptions Type Condition Exception UnauthorizedAccessException throws if the application doesn't have the required permission | Improve this Doc View Source ChangeExtensionAsync(String, FileOption, CancellationToken, Int32) Changes the extension of the current file. Does nothing if file doesn't exist return boolean on whether or not the file extension actually got change Declaration public Task<bool> ChangeExtensionAsync(string newExtension, FileOption option, CancellationToken cancellationToken, int bufferSize = 4096) Parameters Type Name Description String newExtension FileOption option CancellationToken cancellationToken Int32 bufferSize Returns Type Description Task < Boolean > Exceptions Type Condition Exception UnauthorizedAccessException throws if the application doesn't have the required permission | Improve this Doc View Source CopyTo(String, FileOption) return the FullName of where the file was copied to. Declaration public string CopyTo(string copyToFullName, FileOption option) Parameters Type Name Description String copyToFullName The file path to copy to . FileOption option Returns Type Description String Exceptions Type Condition ArgumentOutOfRangeException ArgumentNullException UnauthorizedAccessException throws if the application doesn't have the required permission | Improve this Doc View Source CopyToAsync(String, FileOption, CancellationToken, Int32) Copy the current file to the destination. Returns the destination file name Declaration public Task<string> CopyToAsync(string copyToFullName, FileOption option, CancellationToken cancellationToken, int bufferSize = 4096) Parameters Type Name Description String copyToFullName FileOption option CancellationToken cancellationToken Int32 bufferSize Returns Type Description Task < String > The copy to file | Improve this Doc View Source CopyToAsync(String, FileOption, CancellationToken, IProgress<Int64>, Int32) Copy the current file to the destination with progress Declaration public Task<string> CopyToAsync(string copyToFullName, FileOption option, CancellationToken cancellationToken, IProgress<long> progress, int bufferSize = 4096) Parameters Type Name Description String copyToFullName FileOption option CancellationToken cancellationToken IProgress < Int64 > progress Int32 bufferSize Returns Type Description Task < String > | Improve this Doc View Source CreateOrTruncate(Boolean) Creates a empty file if it doesn't exist otherwise truncates it if set to true [overwrite existing files]. Declaration public bool CreateOrTruncate(bool truncate = true) Parameters Type Name Description Boolean truncate if set to true [truncate]. Returns Type Description Boolean true if XXXX, false otherwise. | Improve this Doc View Source DeleteFile(Boolean) Deletes the file. Declaration public void DeleteFile(bool disposeObject) Parameters Type Name Description Boolean disposeObject | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source GetFileEncoding() Gets the file encoding. if can not determine the file Encoding this return ascii by default Declaration public Encoding GetFileEncoding() Returns Type Description Encoding Encoding. | Improve this Doc View Source GetFileStream(FileOption, Int32, Boolean) Gets the file stream. Declaration public (FileStream fileStream, string fullName) GetFileStream(FileOption option, int bufferSize = 4096, bool useAsync = false) Parameters Type Name Description FileOption option The option. Int32 bufferSize Boolean useAsync Returns Type Description ValueTuple < FileStream , String > FileStream. Exceptions Type Condition ArgumentOutOfRangeException option - null FileNotFoundException | Improve this Doc View Source GetIncrementExtension(String) Declaration public string GetIncrementExtension(string seperator = \"\") Parameters Type Name Description String seperator Returns Type Description String | Improve this Doc View Source GetIncrementFileName(String) Declaration public string GetIncrementFileName(string seperator = \"\") Parameters Type Name Description String seperator Returns Type Description String | Improve this Doc View Source GetParentFolder() Declaration public override FolderObject GetParentFolder() Returns Type Description FolderObject Overrides PathObject.GetParentFolder() | Improve this Doc View Source GetSize() Gets the file size display. Declaration public override string GetSize() Returns Type Description String System.String. Overrides PathObject.GetSize() | Improve this Doc View Source GetSize(SizeUnits) Gets the file size display. Declaration public override long? GetSize(SizeUnits sizeUnits) Parameters Type Name Description SizeUnits sizeUnits Returns Type Description Nullable < Int64 > System.String. Overrides PathObject.GetSize(SizeUnits) | Improve this Doc View Source Init(Boolean) Declaration public void Init(bool throwOnBadFileName) Parameters Type Name Description Boolean throwOnBadFileName | Improve this Doc View Source MoveTo(String, FileOption) Copies the file and deletes the original Declaration public bool MoveTo(string moveToFullName, FileOption option) Parameters Type Name Description String moveToFullName FileOption option Returns Type Description Boolean Exceptions Type Condition Exception UnauthorizedAccessException throws if the application doesn't have the required permission | Improve this Doc View Source MoveToAsync(String, FileOption, CancellationToken, Int32) Copies the file and deletes the original Declaration public Task<bool> MoveToAsync(string moveToFullName, FileOption option, CancellationToken cancellationToken, int bufferSize = 4096) Parameters Type Name Description String moveToFullName FileOption option CancellationToken cancellationToken Int32 bufferSize Returns Type Description Task < Boolean > Exceptions Type Condition Exception UnauthorizedAccessException throws if the application doesn't have the required permission | Improve this Doc View Source ReadAllLines() Reads the file to list. You can start enumerating the collection of strings before the whole collection is returned. Declaration public string[] ReadAllLines() Returns Type Description String [] List<System.String>. | Improve this Doc View Source ReadAllText(Encoding) Reads the entire content of a file all at once Declaration public string ReadAllText(Encoding encoding = null) Parameters Type Name Description Encoding encoding Returns Type Description String List<System.String>. | Improve this Doc View Source ReadToBytesInChunksAsync(Int32, CancellationToken) Reads the file to a byte[] but in chunks Declaration public Task<byte[]> ReadToBytesInChunksAsync(int offset = 0, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Int32 offset CancellationToken cancellationToken Returns Type Description Task < Byte []> System.String. | Improve this Doc View Source ReadToStream(Int32) Reads to filestream Declaration public FileStream ReadToStream(int bufferSize = 4096) Parameters Type Name Description Int32 bufferSize Returns Type Description FileStream System.String. | Improve this Doc View Source ReadToStringInChunksAsync(Int32) Reads to async file stream Declaration public FileStream ReadToStringInChunksAsync(int bufferSize = 4096) Parameters Type Name Description Int32 bufferSize Returns Type Description FileStream System.String. | Improve this Doc View Source RefreshObject() Refreshes the object. Declaration public void RefreshObject() | Improve this Doc View Source SetFileAttribute(AddOrRemoveEnum, List<FileAttributes>) Sets the file attribute. Declaration public void SetFileAttribute(AddOrRemoveEnum option, List<FileAttributes> list) Parameters Type Name Description AddOrRemoveEnum option The option. List < FileAttributes > list The list. | Improve this Doc View Source StartWatching(WatcherChangeTypes, Boolean, Nullable<NotifyFilters>) Starts the watching. Declaration public void StartWatching(WatcherChangeTypes changeTypes = WatcherChangeTypes.Created | WatcherChangeTypes.Deleted | WatcherChangeTypes.Changed | WatcherChangeTypes.Renamed | WatcherChangeTypes.All, bool onNewThread = true, NotifyFilters? filters = default(NotifyFilters? )) Parameters Type Name Description WatcherChangeTypes changeTypes The change types. Boolean onNewThread if set to true [on new thread]. Nullable < NotifyFilters > filters Exceptions Type Condition Exception | Improve this Doc View Source StopWatching() Stops the watching. Declaration public void StopWatching() | Improve this Doc View Source Write(Byte[], FileOption, Int32, Nullable<Int32>) Writes the bytes to file. Returns the full file name content was written to. This method is not thread safe Declaration public string Write(byte[] bytes, FileOption option = FileOption.Overwrite, int offset = 0, int? count = default(int? )) Parameters Type Name Description Byte [] bytes The bytes. FileOption option The option. Int32 offset Nullable < Int32 > count Returns Type Description String | Improve this Doc View Source Write(Stream, FileOption, Int32) Writes the content to file. Returns the full file name content was written to. This method is not thread safe Declaration public string Write(Stream stream, FileOption option = FileOption.Overwrite, int bufferSize = 4096) Parameters Type Name Description Stream stream FileOption option The option. Int32 bufferSize Returns Type Description String | Improve this Doc View Source Write(Stream, IProgress<Int64>, FileOption, Int32) Writes the content to file. Returns the full file name content was written to. This method is not thread safe Declaration public string Write(Stream stream, IProgress<long> progress, FileOption option = FileOption.Overwrite, int bufferSize = 4096) Parameters Type Name Description Stream stream IProgress < Int64 > progress Report progress in stream bytes not percentages. FileOption option The option. Int32 bufferSize Returns Type Description String | Improve this Doc View Source Write(String, FileOption, Encoding, Int32) Writes the content to file. Returns the full file name content was written to. This method is not thread safe Declaration public string Write(string content, FileOption option = FileOption.Overwrite, Encoding encoding = null, int bufferSize = 4096) Parameters Type Name Description String content The content. FileOption option The option. Encoding encoding default to UTF-8 Int32 bufferSize Returns Type Description String | Improve this Doc View Source WriteAsync(Byte[], FileOption, Int32, Nullable<Int32>, CancellationToken) Writes the bytes to file. Returns the full file name content was written to. This method is not thread safe Declaration public Task<string> WriteAsync(byte[] bytes, FileOption option = FileOption.Overwrite, int offset = 0, int? count = default(int? ), CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Byte [] bytes The bytes. FileOption option The option. Int32 offset Nullable < Int32 > count CancellationToken cancellationToken Returns Type Description Task < String > | Improve this Doc View Source WriteAsync(Stream, FileOption, Int32, CancellationToken) Writes the content to file. Returns the full file name content was written to. This method is not thread safe Declaration public Task<string> WriteAsync(Stream stream, FileOption option = FileOption.Overwrite, int bufferSize = 4096, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Stream stream FileOption option The option. Int32 bufferSize CancellationToken cancellationToken Returns Type Description Task < String > | Improve this Doc View Source WriteAsync(Stream, IProgress<Int64>, FileOption, Int32, CancellationToken) Writes the content to file. Returns the full file name content was written to. This method is not thread safe Declaration public Task<string> WriteAsync(Stream stream, IProgress<long> progress, FileOption option = FileOption.Overwrite, int bufferSize = 4096, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Stream stream IProgress < Int64 > progress FileOption option The option. Int32 bufferSize CancellationToken cancellationToken Returns Type Description Task < String > | Improve this Doc View Source WriteAsync(String, FileOption, Encoding, Int32) Writes the content to file. Returns the full file name content was written to. Declaration public Task<string> WriteAsync(string content, FileOption option, Encoding encoding, int bufferSize = 4096) Parameters Type Name Description String content The content. FileOption option The option. Encoding encoding Int32 bufferSize Returns Type Description Task < String > Implements System.IDisposable See Also System.PathObject IDisposable"
  },
  "api/DotNetHelper_IO.FolderObject.html": {
    "href": "api/DotNetHelper_IO.FolderObject.html",
    "title": "Class FolderObject | DotNetHelper-IO",
    "keywords": "Class FolderObject Class FolderObject. Inheritance Object PathObject FolderObject Implements IDisposable Inherited Members PathObject.FullName PathObject.PathType PathObject.Size PathObject.Exist Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper_IO Assembly : DotNetHelper-IO.dll Syntax public class FolderObject : PathObject, IDisposable Constructors | Improve this Doc View Source FolderObject(DirectoryInfo, Boolean, Boolean, Boolean) Declaration public FolderObject(DirectoryInfo directoryInfo, bool loadSubfolders = false, bool loadFilesInFolder = false, bool loadRecursive = false) Parameters Type Name Description DirectoryInfo directoryInfo Boolean loadSubfolders Boolean loadFilesInFolder Boolean loadRecursive | Improve this Doc View Source FolderObject(String, Boolean, Boolean, Boolean) Initializes a new instance of the FolderObject class. Declaration public FolderObject(string path, bool loadSubfolders = false, bool loadFilesInFolder = false, bool loadRecursive = false) Parameters Type Name Description String path The path. Boolean loadSubfolders if set to true [load subfolders]. Boolean loadFilesInFolder if set to true [load files in folder]. Boolean loadRecursive Properties | Improve this Doc View Source DirectoryInfo Declaration public DirectoryInfo DirectoryInfo { get; } Property Value Type Description DirectoryInfo | Improve this Doc View Source Files Gets the files. Declaration public List<FileObject> Files { get; } Property Value Type Description List < FileObject > The files. | Improve this Doc View Source LoadFilesInFolder Gets a value indicating whether [load files in folder]. Declaration public bool LoadFilesInFolder { get; } Property Value Type Description Boolean true if [load files in folder]; otherwise, false . | Improve this Doc View Source LoadRecursive Gets a value indicating whether [load files in folder recursively]. Declaration public bool LoadRecursive { get; } Property Value Type Description Boolean true if [load files in folder recursively]; otherwise, false . | Improve this Doc View Source LoadSubFolders Gets a value indicating whether [load sub folders]. Declaration public bool LoadSubFolders { get; } Property Value Type Description Boolean true if [load sub folders]; otherwise, false . | Improve this Doc View Source Name Declaration public override string Name { get; } Property Value Type Description String Overrides PathObject.Name | Improve this Doc View Source NotifyFilters Gets or sets the notify filters. Declaration public NotifyFilters NotifyFilters { get; set; } Property Value Type Description NotifyFilters The notify filters. | Improve this Doc View Source Subfolders Gets the subfolders. Declaration public List<FolderObject> Subfolders { get; } Property Value Type Description List < FolderObject > The subfolders. | Improve this Doc View Source Watcher Gets the watcher. Declaration public FileSystemWatcher Watcher { get; } Property Value Type Description FileSystemWatcher The watcher. | Improve this Doc View Source WatchTimeout Gets or sets the watch timeout. Declaration public int WatchTimeout { get; set; } Property Value Type Description Int32 The watch timeout. Methods | Improve this Doc View Source CopyTo(String, FolderOption) Copies to. Declaration public void CopyTo(string location, FolderOption folderOption = FolderOption.DoNothingIfExist) Parameters Type Name Description String location The location. FolderOption folderOption Exceptions Type Condition Exception | Improve this Doc View Source CreateOrTruncate(Boolean) Creates all directories and subdirectories in the specified path unless they already exist. Declaration public bool CreateOrTruncate(bool truncateIfExist = true) Parameters Type Name Description Boolean truncateIfExist Returns Type Description Boolean An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition IOException The directory specified is a file.-or-The network name is not known. UnauthorizedAccessException The caller does not have the required permission. ArgumentException ArgumentNullException PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. DirectoryNotFoundException The specified path is invalid (for example, it is on an unmapped drive). NotSupportedException | Improve this Doc View Source CreateOrTruncateSubFolder(String, Boolean) Creates subfolder Declaration public FolderObject CreateOrTruncateSubFolder(string subfolderPath, bool truncateIfExist = true) Parameters Type Name Description String subfolderPath Boolean truncateIfExist Returns Type Description FolderObject | Improve this Doc View Source Delete(Boolean) Deletes the folder. Declaration public void Delete(bool dispose) Parameters Type Name Description Boolean dispose | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source GetAllFiles(String, Boolean) return all files in current folder object path and with filtering if pattern parameter is set Declaration public IEnumerable<string> GetAllFiles(string pattern = \"*\", bool recursive = false) Parameters Type Name Description String pattern Boolean recursive Returns Type Description IEnumerable < String > | Improve this Doc View Source GetAllFolders(String, Boolean) return all files in current folder object path and with filtering if pattern parameter is set Declaration public IEnumerable<FolderObject> GetAllFolders(string pattern = \"*\", bool recursive = false) Parameters Type Name Description String pattern Boolean recursive Returns Type Description IEnumerable < FolderObject > | Improve this Doc View Source GetParentFolder() Declaration public override FolderObject GetParentFolder() Returns Type Description FolderObject Overrides PathObject.GetParentFolder() | Improve this Doc View Source GetSize() Declaration public override string GetSize() Returns Type Description String Overrides PathObject.GetSize() | Improve this Doc View Source GetSize(SizeUnits) Declaration public override long? GetSize(SizeUnits sizeUnits) Parameters Type Name Description SizeUnits sizeUnits Returns Type Description Nullable < Int64 > Overrides PathObject.GetSize(SizeUnits) | Improve this Doc View Source MoveTo(String, FolderOption) Moves to. Declaration public bool MoveTo(string location, FolderOption folderOption) Parameters Type Name Description String location The location. FolderOption folderOption Returns Type Description Boolean Exceptions Type Condition Exception | Improve this Doc View Source RefreshObject(Boolean, Boolean, Boolean) Refreshes the object. Declaration public void RefreshObject(bool loadSubfolders = false, bool loadFilesInFolder = false, bool loadRecursive = false) Parameters Type Name Description Boolean loadSubfolders if set to true [load subfolders]. Boolean loadFilesInFolder if set to true [load files in folder]. Boolean loadRecursive | Improve this Doc View Source SetFolderAttribute(AddOrRemoveEnum, List<FileAttributes>) Sets the file attribute. Declaration public void SetFolderAttribute(AddOrRemoveEnum option, List<FileAttributes> list) Parameters Type Name Description AddOrRemoveEnum option The option. List < FileAttributes > list The list. | Improve this Doc View Source StartWatching(WatcherChangeTypes, Boolean) A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out. Declaration public void StartWatching(WatcherChangeTypes changeTypes = WatcherChangeTypes.Created | WatcherChangeTypes.Deleted | WatcherChangeTypes.Changed | WatcherChangeTypes.Renamed | WatcherChangeTypes.All, bool onNewThread = true) Parameters Type Name Description WatcherChangeTypes changeTypes The change types. Boolean onNewThread if set to true [on new thread]. Exceptions Type Condition Exception | Improve this Doc View Source StopWatching() Stops the watching. Declaration public void StopWatching() | Improve this Doc View Source ZipFolderToFileSystem(FileObject, ArchiveType, Boolean) Zips the folder to file system. Declaration public void ZipFolderToFileSystem(FileObject zipfile, ArchiveType archiveType, bool overWrite = false) Parameters Type Name Description FileObject zipfile The zipfile. SharpCompress.Common.ArchiveType archiveType Type of the archive. Boolean overWrite if set to true [over write]. Exceptions Type Condition NotImplementedException This Feature Hasn't Be Implemented Yet For Rar Files or This Feature Hasn't Be Implemented Yet For Rar Files ArgumentOutOfRangeException archiveType - null | Improve this Doc View Source ZipFolderToMemory() Zips the folder to memory. Declaration public MemoryStream ZipFolderToMemory() Returns Type Description MemoryStream MemoryStream. Implements System.IDisposable See Also IDisposable"
  },
  "api/DotNetHelper_IO.Helpers.ByteSizeHelper.html": {
    "href": "api/DotNetHelper_IO.Helpers.ByteSizeHelper.html",
    "title": "Class ByteSizeHelper | DotNetHelper-IO",
    "keywords": "Class ByteSizeHelper Inheritance Object ByteSizeHelper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper_IO.Helpers Assembly : DotNetHelper-IO.dll Syntax public static class ByteSizeHelper Methods | Improve this Doc View Source GetSize(Int64) Declaration public static string GetSize(long bytes) Parameters Type Name Description Int64 bytes Returns Type Description String | Improve this Doc View Source GetSize(Int64, SizeUnits) Gets the file size display. Declaration public static long? GetSize(long bytes, SizeUnits sizeUnits) Parameters Type Name Description Int64 bytes SizeUnits sizeUnits Returns Type Description Nullable < Int64 > System.String."
  },
  "api/DotNetHelper_IO.Helpers.html": {
    "href": "api/DotNetHelper_IO.Helpers.html",
    "title": "Namespace DotNetHelper_IO.Helpers | DotNetHelper-IO",
    "keywords": "Namespace DotNetHelper_IO.Helpers Classes ByteSizeHelper"
  },
  "api/DotNetHelper_IO.html": {
    "href": "api/DotNetHelper_IO.html",
    "title": "Namespace DotNetHelper_IO | DotNetHelper-IO",
    "keywords": "Namespace DotNetHelper_IO Classes FileObject Class FileObject. FolderObject Class FolderObject. PathObject Class FolderObject. ZipFileObject"
  },
  "api/DotNetHelper_IO.PathObject.html": {
    "href": "api/DotNetHelper_IO.PathObject.html",
    "title": "Class PathObject | DotNetHelper-IO",
    "keywords": "Class PathObject Class FolderObject. Inheritance Object PathObject FileObject FolderObject Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper_IO Assembly : DotNetHelper-IO.dll Syntax public abstract class PathObject Constructors | Improve this Doc View Source PathObject(PathType, String) Declaration protected PathObject(PathType pathType, string fullName) Parameters Type Name Description PathType pathType String fullName Properties | Improve this Doc View Source Exist return whether path exist. Declaration public bool Exist { get; } Property Value Type Description Boolean null if [exist] contains no value, true if [exist]; otherwise, false . | Improve this Doc View Source FullName Gets the full path. Declaration public string FullName { get; } Property Value Type Description String | Improve this Doc View Source Name if object is file then get the name of the file with extension if object is folder then get the folder name only Declaration public abstract string Name { get; } Property Value Type Description String | Improve this Doc View Source PathType Declaration public PathType PathType { get; } Property Value Type Description PathType | Improve this Doc View Source Size return the size of the object in bytes Declaration public long? Size { get; } Property Value Type Description Nullable < Int64 > Methods | Improve this Doc View Source GetParentFolder() Declaration public abstract FolderObject GetParentFolder() Returns Type Description FolderObject | Improve this Doc View Source GetSize() Declaration public abstract string GetSize() Returns Type Description String | Improve this Doc View Source GetSize(SizeUnits) Declaration public abstract long? GetSize(SizeUnits sizeUnits) Parameters Type Name Description SizeUnits sizeUnits Returns Type Description Nullable < Int64 >"
  },
  "api/DotNetHelper_IO.ZipFileObject.html": {
    "href": "api/DotNetHelper_IO.ZipFileObject.html",
    "title": "Class ZipFileObject | DotNetHelper-IO",
    "keywords": "Class ZipFileObject Inheritance Object PathObject FileObject ZipFileObject Implements IDisposable Inherited Members FileObject.DefaultEncoding FileObject.FileInfo FileObject.FileNameOnly FileObject.FileNameOnlyNoExtension FileObject.FilePathOnly FileObject.Extension FileObject.FolderNameOnly FileObject.Name FileObject.GetSize() FileObject.GetSize(SizeUnits) FileObject.GetParentFolder() FileObject.WatchTimeout FileObject.Watcher FileObject.NotifyFilters FileObject.Init(Boolean) FileObject.RefreshObject() FileObject.CopyTo(String, FileOption) FileObject.CopyToAsync(String, FileOption, CancellationToken, Int32) FileObject.CopyToAsync(String, FileOption, CancellationToken, IProgress<Int64>, Int32) FileObject.MoveTo(String, FileOption) FileObject.MoveToAsync(String, FileOption, CancellationToken, Int32) FileObject.ChangeExtension(String, FileOption, IProgress<Double>) FileObject.ChangeExtensionAsync(String, FileOption, CancellationToken, Int32) FileObject.DeleteFile(Boolean) FileObject.GetIncrementFileName(String) FileObject.GetIncrementExtension(String) FileObject.ReadAllLines() FileObject.ReadAllText(Encoding) FileObject.ReadToBytesInChunksAsync(Int32, CancellationToken) FileObject.ReadToStream(Int32) FileObject.ReadToStringInChunksAsync(Int32) FileObject.GetFileStream(FileOption, Int32, Boolean) FileObject.Write(String, FileOption, Encoding, Int32) FileObject.Write(Byte[], FileOption, Int32, Nullable<Int32>) FileObject.Write(Stream, FileOption, Int32) FileObject.Write(Stream, IProgress<Int64>, FileOption, Int32) FileObject.WriteAsync(String, FileOption, Encoding, Int32) FileObject.WriteAsync(Byte[], FileOption, Int32, Nullable<Int32>, CancellationToken) FileObject.WriteAsync(Stream, FileOption, Int32, CancellationToken) FileObject.WriteAsync(Stream, IProgress<Int64>, FileOption, Int32, CancellationToken) FileObject.GetFileEncoding() FileObject.StartWatching(WatcherChangeTypes, Boolean, Nullable<NotifyFilters>) FileObject.StopWatching() FileObject.SetFileAttribute(AddOrRemoveEnum, List<FileAttributes>) FileObject.Dispose() FileObject.Dispose(Boolean) PathObject.FullName PathObject.PathType PathObject.Size PathObject.Exist Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : DotNetHelper_IO Assembly : DotNetHelper-IO.dll Syntax public class ZipFileObject : FileObject, IDisposable Constructors | Improve this Doc View Source ZipFileObject(String, ArchiveType) Declaration public ZipFileObject(string file, ArchiveType type = ArchiveType.Zip) Parameters Type Name Description String file SharpCompress.Common.ArchiveType type Properties | Improve this Doc View Source Type Declaration public ArchiveType Type { get; } Property Value Type Description SharpCompress.Common.ArchiveType Methods | Improve this Doc View Source AddFilesToZip(List<String>, FileOption) Declaration public void AddFilesToZip(List<string> files, FileOption option = FileOption.Overwrite) Parameters Type Name Description List < String > files new files to be added to the zip file FileOption option how to handle files that will be added to the zip | Improve this Doc View Source AddFileToZip(String) Declaration public void AddFileToZip(string FullName) Parameters Type Name Description String FullName | Improve this Doc View Source CreateOrTruncate(Boolean) Creates a empty zip file if it doesn't exist otherwise truncates it if set to true [overwrite existing files]. Declaration public bool CreateOrTruncate(bool truncate = true) Parameters Type Name Description Boolean truncate if set to true [truncate]. Returns Type Description Boolean true if XXXX, false otherwise. | Improve this Doc View Source RemoveFilesToZip(Predicate<IArchiveEntry>) Declaration public void RemoveFilesToZip(Predicate<IArchiveEntry> whereClause) Parameters Type Name Description Predicate < SharpCompress.Archives.IArchiveEntry > whereClause | Improve this Doc View Source UnZipFile(FolderObject, FileOption, Boolean) Declaration public void UnZipFile(FolderObject folder, FileOption option, bool extractFullPath = false) Parameters Type Name Description FolderObject folder FileOption option Boolean extractFullPath Implements System.IDisposable"
  },
  "index.html": {
    "href": "index.html",
    "title": "DotNetHelper-IO | DotNetHelper-IO",
    "keywords": "DotNetHelper-IO DotNetHelper-IO is a simple easy to use thread safe library for handling all types of files & folders || View on Github || How to use public enum FileOption { Append = 1, Overwrite = 2, DoNothingIfExist = 3, IncrementFileNameIfExist = 4, IncrementFileExtensionIfExist = 5, } var sampleFile = \"C:\\Temp\\dotnet-hosting-2.2.1-win.exe\"; var file = new FileObject(sampleFile); var folder = new FolderObject(sampleFile); var zipFile = new ZipFileObject(sampleFile); // Quick access to all your file information DateTime? CreationTime = file.CreationTime; // 1/23/2019 9:03:26 PM DateTime? CreationTimeUtc = file.CreationTimeUtc; // 1/24/2019 3:03:26 AM Boolean? Exist = file.Exist; // True String Extension = file.Extension; // .exe String FileNameOnly = file.FileNameOnly; // dotnet-hosting-2.2.1-win.exe String FileNameOnlyNoExtension = file.FileNameOnlyNoExtension; // dotnet-hosting-2.2.1-win String FilePathOnly = file.FilePathOnly; // C:\\Temp\\ Int64? FileSize = file.FileSize; // 100720328 String FolderNameOnly = file.FolderNameOnly; // Temp String FullFilePath = file.FullFilePath; // C:\\Temp\\dotnet-hosting-2.2.1-win.exe DateTime? LastAccessTime = file.LastAccessTime; // 1/23/2019 9:03:26 PM DateTime? LastAccessTimeUtc = file.LastAccessTimeUtc; // 1/24/2019 3:03:26 AM DateTime? LastWriteTime = file.LastWriteTime; // 1/23/2019 9:03:47 PM DateTime? LastWriteTimeUtc = file.LastWriteTimeUtc; // 1/24/2019 3:03:47 AM NotifyFilters NotifyFilters = file.NotifyFilters; // FileName, LastWrite, LastAccess, CreationTime FileSystemWatcher Watcher = file.Watcher; // NULL Int32 WatchTimeout = file.WatchTimeout; // 2147483647 // Perform thread safe IO operations with progress reporting public bool MoveTo(string moveToFullFilePath, FileOption option, IProgress<double> progress = null) public bool CopyTo(string copyToFullFilePath, FileOption option, IProgress<double> progress = null) public void DeleteFile(Action<Exception> onFailedDeletion, bool disposeObject = false) long? GetFileSize(FileObject.SizeUnits sizeUnits, bool refreshObject = false); <!-- Links. --> <!-- Documentation Links. -->"
  },
  "tutorials/Attributes/attribute.html": {
    "href": "tutorials/Attributes/attribute.html",
    "title": "Custom Attributes | DotNetHelper-IO",
    "keywords": "Custom Attributes In the secnarios where you need to build Update,Delete, or Upsert Statements. Attributes are use to generate the where clause. This library has its own custom attributes and can also work with the common DataAnnotation attributes. With the support of DataAnnotation this means this library could be paired with your favorite orm like Dapper or Enitity Framework Mark a property as an identity fields. [SqlColumn(SetIsIdentityKey = true)] OR [DatabaseGenerated(DatabaseGeneratedOption.Identity)] Mark a property as a key field. [SqlColumn(SetIsIdentityKey = true)] OR [DatabaseGenerated(DatabaseGeneratedOption.Identity)] <!-- #### Storing Columns As CSV, XML, & JSON ```csharp [SqlColumn(SerializableType = SerializableType.Json)] or [SqlColumn(SerializableType = SerializableType.Xml)] or [SqlColumn(SerializableType = SerializableType.Csv)] ``` -->"
  },
  "tutorials/GenerateSql/datatable2sql.html": {
    "href": "tutorials/GenerateSql/datatable2sql.html",
    "title": "SAMPLE ARTICLE | DotNetHelper-IO",
    "keywords": "SAMPLE ARTICLE"
  },
  "tutorials/GenerateSql/object2sql.html": {
    "href": "tutorials/GenerateSql/object2sql.html",
    "title": "SAMPLE ARTICLE | DotNetHelper-IO",
    "keywords": "SAMPLE ARTICLE"
  },
  "tutorials/index.html": {
    "href": "tutorials/index.html",
    "title": "THIS IS THE HOME PAGE TO TUTORIALS | DotNetHelper-IO",
    "keywords": "THIS IS THE HOME PAGE TO TUTORIALS"
  }
}